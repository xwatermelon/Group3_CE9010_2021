{
<<<<<<< HEAD
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "name": "python3613jvsc74a57bd07fd2f421054e15c875b1ee5f3f806f2d4c895395662106de4ad96dee42da7bf7",
      "display_name": "Python 3.6.13 64-bit ('CE9010_2021_Group3': conda)"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.13"
    },
    "metadata": {
      "interpreter": {
        "hash": "0a84f4e9513e11ca67866431d8df20f43fe616bff8acff9def79f28cd0bb3c91"
      }
    },
    "colab": {
      "name": "Project.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b32860ce"
      },
      "source": [
        "# CE9010 Introduction To Data Analysis\n",
        "\n",
        "## Group 3\n",
        "\n",
        "Student Name  |  Matric No  \n",
        "---|---\n",
        "Say Yueyang, Symus|U1922016K   \n",
        "He Zeqing|U1722721G\n",
        "Kwek Yan Qing|U1740743J   \n",
        "\n",
        "---\n",
        "\n",
        "# Background\n",
        "\n",
        "Haze is one major form of air pollution that Singaporeans face annually. The presence of haze is attributed to the forest fires in Sumatra, Indonesia. Due to the increase in demand of commercial crops, Indonesian farmers have resorted to shifting agriculture, which includes the large-scale slash-and-burn of forest land to produce fertile planting grounds. The resulting air pollution is then spread across the region by the climatic phenomenon El Nino, enveloping Singapore in a blanket of haze and affecting the overall health of Singaporeans. In 2020, Indonesia fires torched approximately 207,000 hectares of forests from January to September. While the area is smaller compared to previous years, the burning resulted in a US$5.2 billion cost towards the Indonesian economy, and the occurrence of toxic smog over the city.\n",
        "\n",
        "**References:**\n",
        "- [Haze Pollution](https://eresources.nlb.gov.sg/infopedia/articles/SIP_2013-08-30_185150.html#:~:text=Forest%20fires%20in%20Sumatra%2C%20Indonesia,of%20the%20haze%20in%20Singapore.&text=Strong%20winds%20during%20the%20southwest,such%20fires%20throughout%20Southeast%20Asia.)\n",
        "- [Commentary: Little smoke this haze season – but fires rage on in Indonesia](https://www.channelnewsasia.com/news/commentary/indonesia-forest-fire-peat-haze-palm-oil-jokowi-omnibus-bill-13533700)\n",
        "\n",
        "# Objective\n",
        "\n",
        "The objective of our study is to predict the possible intensity of future hotspots in South East Asia, including Indonesia.\n",
        "Hopefully, this study will be able to support further research in estimating the possibility and severity of the occurrences of haze in Singapore.\n",
        "\n",
        "Our study will be conducted with the relevant data on forest fires in South East Asia. Our dataset is obtained from the National Aeronautics and Space Administration (NASA)'s Fire Information for Resource Management System (FIRMS). It contains both geographical and technical data extracted from the Visible Infrared Imaging Radiometer Suite (VIIRS) sensor aboard their NOAA-20 weather satellite.\n",
        "\n",
        "**References:**\n",
        "- [Fire Information for Resource Management System](https://firms2.modaps.eosdis.nasa.gov/)\n",
        "- [Visible Infrared Imaging Radiometer Suite](https://en.wikipedia.org/wiki/Visible_Infrared_Imaging_Radiometer_Suite)\n",
        "\n",
        "---"
      ],
      "id": "b32860ce"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6de5ee4a"
      },
      "source": [
        "# Table of Contents\n",
        "\n",
        "1. [Setup](#1-|-Setup)\n",
        "2. [Dataset Summaries](#2-|-Dataset-Summaries)\n",
        "3. [Exploratory Data Analysis](#3-|-Exploratory-Data-Analysis)\n",
        "4. [Data Pre-Preprocessing](#4-|-Data-Pre-Processing)\n",
        "5. [Data Analysis](#5-|-Data-Analysis)\n",
        "6. [Results Analysis](#6-|-Results-Analysis)"
      ],
      "id": "6de5ee4a"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d76f3246"
      },
      "source": [
        "# 1 | Setup "
      ],
      "id": "d76f3246"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "16ffcd39"
      },
      "source": [
        "1. Ensure that the environment.yml file accompanying this notebook is located in the same directory as the notebook. <br><br>\n",
        "2. Open Anaconda Prompt, and in Anaconda Prompt, navigate to the directory where the notebook was downloaded. <br>\n",
        "3. In Anaconda Prompt, enter the following line of code:\n",
        "> conda env create -f environment.yml\n",
        "\n",
        "4. In Anaconda Prompt, enter the following line of code:\n",
        "> conda info --envs\n",
        "\n",
        "If installation of the environment is successful, you will see the environment 'CE9010_2021_Group3' listed in the list of environments.\n",
        "\n",
        "5. Activate the notebook: \n",
        "> conda activate CE9010_2021_Group3\n",
        "\n",
        "6. Run Jupyter Notebook \n",
        "> jupyter notebook"
      ],
      "id": "16ffcd39"
=======
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b32860ce",
   "metadata": {
    "id": "b32860ce"
   },
   "source": [
    "# CE9010 Introduction To Data Analysis\n",
    "\n",
    "## Group 3\n",
    "\n",
    "Student Name  |  Matric No  \n",
    ":-:|:-:\n",
    "Say Yueyang, Symus|U1922016K   \n",
    "He Zeqing|U1722721G\n",
    "Kwek Yan Qing|U1740743J   \n",
    "\n",
    "---\n",
    "\n",
    "# Background\n",
    "\n",
    "Haze is one major form of air pollution that Singaporeans face annually. The presence of haze is attributed to the forest fires in Sumatra, Indonesia. Due to the increase in demand of commercial crops, Indonesian farmers have resorted to shifting agriculture, which includes the large-scale slash-and-burn of forest land to produce fertile planting grounds. The resulting air pollution is then spread across the region by the climatic phenomenon El Nino, enveloping Singapore in a blanket of haze and affecting the overall health of Singaporeans. In 2020, Indonesia fires torched approximately 207,000 hectares of forests from January to September. While the area is smaller compared to previous years, the burning resulted in a US$5.2 billion cost towards the Indonesian economy, and the occurrence of toxic smog over the city.\n",
    "\n",
    "**References:**\n",
    "- [Haze Pollution](https://eresources.nlb.gov.sg/infopedia/articles/SIP_2013-08-30_185150.html#:~:text=Forest%20fires%20in%20Sumatra%2C%20Indonesia,of%20the%20haze%20in%20Singapore.&text=Strong%20winds%20during%20the%20southwest,such%20fires%20throughout%20Southeast%20Asia.)\n",
    "- [Commentary: Little smoke this haze season – but fires rage on in Indonesia](https://www.channelnewsasia.com/news/commentary/indonesia-forest-fire-peat-haze-palm-oil-jokowi-omnibus-bill-13533700)\n",
    "\n",
    "# Objective\n",
    "\n",
    "The objective of our study is to predict the possible intensity of future hotspots in South East Asia, including Indonesia.\n",
    "Hopefully, this study will be able to support further research in estimating the possibility and severity of the occurrences of haze in Singapore.\n",
    "\n",
    "Our study will be conducted with the relevant data on forest fires in South East Asia. Our dataset is obtained from the National Aeronautics and Space Administration (NASA)'s Fire Information for Resource Management System (FIRMS). It contains both geographical and technical data extracted from the Visible Infrared Imaging Radiometer Suite (VIIRS) sensor aboard their NOAA-20 weather satellite.\n",
    "\n",
    "The table below describes each data available in our dataset:\n",
    "\n",
    "| Data | Description |\n",
    "| -: | :- |\n",
    "| latitude | Indicates the latitude of fire pixel. |\n",
    "| longitude\t| Indicates the longitude of fire pixel. |\n",
    "| bright_ti4 | Indicates the VIIRS I-4 Channel brightness temperature of the fire pixel. |\n",
    "| scan | Indicates the  Along Scan pixel size. |\n",
    "| track\t| Indicates the Along Track pixel size.  |\n",
    "| acq_date | Indicates the date of the acquired data. |\n",
    "| acq_time | Indicates the time of the acquired data. |\n",
    "| satellite | Indicates if the scan was done by the satellite (boolean values). |\n",
    "| confidence | Indicates the confidence level of the data collected. |\n",
    "| version | Indicates the version and source of data processing. |\n",
    "| bright_ti5 | Indicates the VIIRS I-5 Channel brightness temperature of the fire pixel. |\n",
    "| frp | Indicates the Fire Radiative Power (Detected thermal strength of the fire). |\n",
    "| daynight | Indicates whether if it's daytime fire or nighttime fire. |\n",
    "\n",
    "**References:**\n",
    "- [Fire Information for Resource Management System](https://firms2.modaps.eosdis.nasa.gov/)\n",
    "- [Visible Infrared Imaging Radiometer Suite](https://en.wikipedia.org/wiki/Visible_Infrared_Imaging_Radiometer_Suite)\n",
    "- [Attribute Fields](https://earthdata.nasa.gov/earth-observation-data/near-real-time/firms/v1-vnp14imgt#ed-viirs-375m-attributes)\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6de5ee4a",
   "metadata": {
    "id": "6de5ee4a"
   },
   "source": [
    "# Table of Contents\n",
    "\n",
    "1. [Setup](#1-|-Setup)\n",
    "2. [Dataset Summaries](#2-|-Dataset-Summaries)\n",
    "3. [Exploratory Data Analysis](#3-|-Exploratory-Data-Analysis)\n",
    "4. [Data Pre-Preprocessing](#4-|-Data-Pre-Processing)\n",
    "5. [Data Analysis](#5-|-Data-Analysis)\n",
    "6. [Results Analysis](#6-|-Results-Analysis)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d76f3246",
   "metadata": {
    "id": "d76f3246"
   },
   "source": [
    "# 1 | Setup "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc7395d3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "16ffcd39",
   "metadata": {
    "id": "16ffcd39"
   },
   "source": [
    "1. Ensure that the environment.yml file accompanying this notebook is located in the same directory as the notebook. <br><br>\n",
    "2. Open Anaconda Prompt, and in Anaconda Prompt, navigate to the directory where the notebook was downloaded. <br>\n",
    "3. In Anaconda Prompt, enter the following line of code:\n",
    "> conda env create -f environment.yml\n",
    "\n",
    "4. In Anaconda Prompt, enter the following line of code:\n",
    "> conda info --envs\n",
    "\n",
    "If installation of the environment is successful, you will see the environment 'CE9010_2021_Group3' listed in the list of environments.\n",
    "\n",
    "5. Activate the notebook: \n",
    "> conda activate CE9010_2021_Group3\n",
    "\n",
    "6. Run Jupyter Notebook \n",
    "> jupyter notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8da0730",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import sys\n",
    "#!conda install --yes --prefix {sys.prefix} numpy\n",
    "#!conda install --yes --prefix {sys.prefix} seaborn\n",
    "#!conda install --yes --prefix {sys.prefix} plotly\n",
    "#!conda install --yes --prefix {sys.prefix} pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "tBN61h4B-MUD",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tBN61h4B-MUD",
    "outputId": "8aff1ab4-2510-4933-e714-9d2249a37484"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (1.19.5)\n",
      "Requirement already satisfied: seaborn in /usr/local/lib/python3.7/dist-packages (0.11.1)\n",
      "Requirement already satisfied: pandas>=0.23 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.1.5)\n",
      "Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.4.1)\n",
      "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.19.5)\n",
      "Requirement already satisfied: matplotlib>=2.2 in /usr/local/lib/python3.7/dist-packages (from seaborn) (3.2.2)\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->seaborn) (2018.9)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->seaborn) (2.8.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (1.3.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (2.4.7)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.23->seaborn) (1.15.0)\n",
      "Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (4.4.1)\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from plotly) (1.15.0)\n",
      "Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly) (1.3.3)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.1.5)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.1)\n",
      "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n",
      "Collecting geopandas\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d7/bf/e9cefb69d39155d122b6ddca53893b61535fa6ffdad70bf5ef708977f53f/geopandas-0.9.0-py2.py3-none-any.whl (994kB)\n",
      "\u001b[K     |████████████████████████████████| 1.0MB 6.4MB/s \n",
      "\u001b[?25hCollecting pyproj>=2.2.0\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b1/72/d52e9ca81caef056062d71991b0e9b1d16af042245627c5d0e4916a36c4f/pyproj-3.0.1-cp37-cp37m-manylinux2010_x86_64.whl (6.5MB)\n",
      "\u001b[K     |████████████████████████████████| 6.5MB 30.8MB/s \n",
      "\u001b[?25hRequirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.1.5)\n",
      "Collecting fiona>=1.8\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ea/2a/404b22883298a3efe9c6ef8d67acbf2c38443fa366ee9cd4cd34e17626ea/Fiona-1.8.19-cp37-cp37m-manylinux1_x86_64.whl (15.3MB)\n",
      "\u001b[K     |████████████████████████████████| 15.3MB 262kB/s \n",
      "\u001b[?25hRequirement already satisfied: shapely>=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.7.1)\n",
      "Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from pyproj>=2.2.0->geopandas) (2020.12.5)\n",
      "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->geopandas) (1.19.5)\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->geopandas) (2018.9)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->geopandas) (2.8.1)\n",
      "Requirement already satisfied: six>=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (1.15.0)\n",
      "Requirement already satisfied: click<8,>=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (7.1.2)\n",
      "Collecting munch\n",
      "  Downloading https://files.pythonhosted.org/packages/cc/ab/85d8da5c9a45e072301beb37ad7f833cd344e04c817d97e0cc75681d248f/munch-2.5.0-py2.py3-none-any.whl\n",
      "Collecting click-plugins>=1.0\n",
      "  Downloading https://files.pythonhosted.org/packages/e9/da/824b92d9942f4e472702488857914bdd50f73021efea15b4cad9aca8ecef/click_plugins-1.1.1-py2.py3-none-any.whl\n",
      "Collecting cligj>=0.5\n",
      "  Downloading https://files.pythonhosted.org/packages/42/1e/947eadf10d6804bf276eb8a038bd5307996dceaaa41cfd21b7a15ec62f5d/cligj-0.7.1-py3-none-any.whl\n",
      "Requirement already satisfied: attrs>=17 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (20.3.0)\n",
      "Installing collected packages: pyproj, munch, click-plugins, cligj, fiona, geopandas\n",
      "Successfully installed click-plugins-1.1.1 cligj-0.7.1 fiona-1.8.19 geopandas-0.9.0 munch-2.5.0 pyproj-3.0.1\n",
      "Requirement already satisfied: imageio in /usr/local/lib/python3.7/dist-packages (2.4.1)\n",
      "Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from imageio) (7.1.2)\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from imageio) (1.19.5)\n"
     ]
    }
   ],
   "source": [
    "# Install required conda packages in the current Jupyter kernel\n",
    "#import sys\n",
    "#!pip install numpy\n",
    "#!pip install seaborn\n",
    "#!pip install plotly\n",
    "#!pip install pandas\n",
    "#!pip install geopandas\n",
    "#!pip install imageio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "47d2e636",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "47d2e636",
    "outputId": "9e1a0d24-aa9f-42db-d710-792f8cd93c85"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One or more modules not imported!\n",
      "Please check that all dependencies are installed.\n"
     ]
    }
   ],
   "source": [
    "# Import required modules\n",
    "import os\n",
    "try:\n",
    "    import pandas as pd\n",
    "    import plotly.express as px\n",
    "    from matplotlib import pyplot as plt\n",
    "    from IPython.display import IFrame,Image\n",
    "    import seaborn as sns\n",
    "    import numpy as np\n",
    "    import geopandas as gpd\n",
    "    import imageio\n",
    "    print (\"All modules imported successfully.\")\n",
    "except ImportError:\n",
    "    print (\"One or more modules not imported!\")\n",
    "    print (\"Please check that all dependencies are installed.\")\n",
    "\n",
    "# Directory to store local content for loading of interactive images\n",
    "if not os.path.exists(\"content\"):\n",
    "    os.mkdir(\"content\")\n",
    "# Clean up past images\n",
    "else:\n",
    "    for f in os.listdir('./content'):\n",
    "        os.remove(os.path.join('content', f))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1508e32f",
   "metadata": {
    "id": "1508e32f"
   },
   "source": [
    "# 2 | Dataset Summaries "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`<<<<<<< HEAD`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "97a119dd",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 217
    },
    "id": "97a119dd",
    "outputId": "b2ae2029-a0e4-42f0-9595-c33435f7d652"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(61404, 13)\n"
     ]
>>>>>>> 27f0ff681bfdb43828a9c52923b44cf325d6b708
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tBN61h4B-MUD",
        "outputId": "8aff1ab4-2510-4933-e714-9d2249a37484"
      },
      "source": [
        "# Install required conda packages in the current Jupyter kernel\n",
        "import sys\n",
        "!pip install numpy\n",
        "!pip install seaborn\n",
        "!pip install plotly\n",
        "!pip install pandas\n",
        "!pip install geopandas\n",
        "!pip install  imageio"
      ],
      "id": "tBN61h4B-MUD",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (1.19.5)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.7/dist-packages (0.11.1)\n",
            "Requirement already satisfied: pandas>=0.23 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.1.5)\n",
            "Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.19.5)\n",
            "Requirement already satisfied: matplotlib>=2.2 in /usr/local/lib/python3.7/dist-packages (from seaborn) (3.2.2)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->seaborn) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->seaborn) (2.8.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (0.10.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (1.3.1)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (2.4.7)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.23->seaborn) (1.15.0)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (4.4.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from plotly) (1.15.0)\n",
            "Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly) (1.3.3)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.1.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.1)\n",
            "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n",
            "Collecting geopandas\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d7/bf/e9cefb69d39155d122b6ddca53893b61535fa6ffdad70bf5ef708977f53f/geopandas-0.9.0-py2.py3-none-any.whl (994kB)\n",
            "\u001b[K     |████████████████████████████████| 1.0MB 6.4MB/s \n",
            "\u001b[?25hCollecting pyproj>=2.2.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b1/72/d52e9ca81caef056062d71991b0e9b1d16af042245627c5d0e4916a36c4f/pyproj-3.0.1-cp37-cp37m-manylinux2010_x86_64.whl (6.5MB)\n",
            "\u001b[K     |████████████████████████████████| 6.5MB 30.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.1.5)\n",
            "Collecting fiona>=1.8\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ea/2a/404b22883298a3efe9c6ef8d67acbf2c38443fa366ee9cd4cd34e17626ea/Fiona-1.8.19-cp37-cp37m-manylinux1_x86_64.whl (15.3MB)\n",
            "\u001b[K     |████████████████████████████████| 15.3MB 262kB/s \n",
            "\u001b[?25hRequirement already satisfied: shapely>=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.7.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from pyproj>=2.2.0->geopandas) (2020.12.5)\n",
            "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->geopandas) (1.19.5)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->geopandas) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->geopandas) (2.8.1)\n",
            "Requirement already satisfied: six>=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (1.15.0)\n",
            "Requirement already satisfied: click<8,>=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (7.1.2)\n",
            "Collecting munch\n",
            "  Downloading https://files.pythonhosted.org/packages/cc/ab/85d8da5c9a45e072301beb37ad7f833cd344e04c817d97e0cc75681d248f/munch-2.5.0-py2.py3-none-any.whl\n",
            "Collecting click-plugins>=1.0\n",
            "  Downloading https://files.pythonhosted.org/packages/e9/da/824b92d9942f4e472702488857914bdd50f73021efea15b4cad9aca8ecef/click_plugins-1.1.1-py2.py3-none-any.whl\n",
            "Collecting cligj>=0.5\n",
            "  Downloading https://files.pythonhosted.org/packages/42/1e/947eadf10d6804bf276eb8a038bd5307996dceaaa41cfd21b7a15ec62f5d/cligj-0.7.1-py3-none-any.whl\n",
            "Requirement already satisfied: attrs>=17 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (20.3.0)\n",
            "Installing collected packages: pyproj, munch, click-plugins, cligj, fiona, geopandas\n",
            "Successfully installed click-plugins-1.1.1 cligj-0.7.1 fiona-1.8.19 geopandas-0.9.0 munch-2.5.0 pyproj-3.0.1\n",
            "Requirement already satisfied: imageio in /usr/local/lib/python3.7/dist-packages (2.4.1)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from imageio) (7.1.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from imageio) (1.19.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "47d2e636",
        "outputId": "9e1a0d24-aa9f-42db-d710-792f8cd93c85"
      },
      "source": [
        "# Import required modules\n",
        "import os\n",
        "try:\n",
        "    import pandas as pd\n",
        "    import plotly.express as px\n",
        "    from matplotlib import pyplot as plt\n",
        "    from IPython.display import IFrame,Image\n",
        "    import seaborn as sns\n",
        "    import numpy as np\n",
        "    import geopandas as gpd\n",
        "    import imageio\n",
        "    print (\"All modules imported successfully.\")\n",
        "except ImportError:\n",
        "    print (\"One or more modules not imported!\")\n",
        "    print (\"Please check that all dependencies are installed.\")\n",
        "\n",
        "# Directory to store local content for loading of interactive images\n",
        "if not os.path.exists(\"content\"):\n",
        "    os.mkdir(\"content\")\n",
        "# Clean up past images\n",
        "else:\n",
        "    for f in os.listdir('./content'):\n",
        "        os.remove(os.path.join('content', f))"
      ],
      "id": "47d2e636",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "All modules imported successfully.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1508e32f"
      },
      "source": [
        "# 2 | Dataset Summaries "
      ],
      "id": "1508e32f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "id": "97a119dd",
        "outputId": "b2ae2029-a0e4-42f0-9595-c33435f7d652"
      },
      "source": [
        "# Data Acquisition\n",
        "# Import data from the Active Fire Dataset, VIIRS 375m / NOAA-20\n",
        "data = pd.read_csv(\"https://firms2.modaps.eosdis.nasa.gov/data/active_fire/noaa-20-viirs-c2/csv/J1_VIIRS_C2_SouthEast_Asia_7d.csv\",sep=',')\n",
        "print (data.shape) # dimensions\n",
        "data[:5]"
      ],
      "id": "97a119dd",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(61403, 13)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>bright_ti4</th>\n",
              "      <th>scan</th>\n",
              "      <th>track</th>\n",
              "      <th>acq_date</th>\n",
              "      <th>acq_time</th>\n",
              "      <th>satellite</th>\n",
              "      <th>confidence</th>\n",
              "      <th>version</th>\n",
              "      <th>bright_ti5</th>\n",
              "      <th>frp</th>\n",
              "      <th>daynight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-10.04099</td>\n",
              "      <td>149.90570</td>\n",
              "      <td>330.4</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.37</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>324</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>295.7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-9.61136</td>\n",
              "      <td>148.58527</td>\n",
              "      <td>332.3</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.39</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>324</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>283.1</td>\n",
              "      <td>3.4</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-7.04995</td>\n",
              "      <td>146.57198</td>\n",
              "      <td>338.8</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.42</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>324</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>279.5</td>\n",
              "      <td>6.2</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-6.89797</td>\n",
              "      <td>146.34767</td>\n",
              "      <td>331.8</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.43</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>324</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>290.2</td>\n",
              "      <td>4.1</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-6.71671</td>\n",
              "      <td>147.33585</td>\n",
              "      <td>328.4</td>\n",
              "      <td>0.49</td>\n",
              "      <td>0.40</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>324</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>296.9</td>\n",
              "      <td>4.9</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   latitude  longitude  bright_ti4  scan  ...  version bright_ti5  frp  daynight\n",
              "0 -10.04099  149.90570       330.4  0.41  ...   2.0NRT      295.7  3.5         D\n",
              "1  -9.61136  148.58527       332.3  0.46  ...   2.0NRT      283.1  3.4         D\n",
              "2  -7.04995  146.57198       338.8  0.55  ...   2.0NRT      279.5  6.2         D\n",
              "3  -6.89797  146.34767       331.8  0.56  ...   2.0NRT      290.2  4.1         D\n",
              "4  -6.71671  147.33585       328.4  0.49  ...   2.0NRT      296.9  4.9         D\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "1fc24f7d",
        "outputId": "9ae20391-711b-4fad-a3d0-08c6f293ace4"
      },
      "source": [
        "# Check dataset\n",
        "data.describe()"
      ],
      "id": "1fc24f7d",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>bright_ti4</th>\n",
              "      <th>scan</th>\n",
              "      <th>track</th>\n",
              "      <th>acq_time</th>\n",
              "      <th>satellite</th>\n",
              "      <th>bright_ti5</th>\n",
              "      <th>frp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>61403.000000</td>\n",
              "      <td>61403.000000</td>\n",
              "      <td>61403.000000</td>\n",
              "      <td>61403.000000</td>\n",
              "      <td>61403.000000</td>\n",
              "      <td>61403.000000</td>\n",
              "      <td>61403.0</td>\n",
              "      <td>61403.000000</td>\n",
              "      <td>61403.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>19.606934</td>\n",
              "      <td>100.636421</td>\n",
              "      <td>336.583108</td>\n",
              "      <td>0.451214</td>\n",
              "      <td>0.456369</td>\n",
              "      <td>814.094067</td>\n",
              "      <td>1.0</td>\n",
              "      <td>300.829821</td>\n",
              "      <td>14.381796</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.884919</td>\n",
              "      <td>7.214471</td>\n",
              "      <td>15.313828</td>\n",
              "      <td>0.082711</td>\n",
              "      <td>0.101549</td>\n",
              "      <td>439.946504</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.225304</td>\n",
              "      <td>30.164642</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-11.062080</td>\n",
              "      <td>88.003890</td>\n",
              "      <td>207.900000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>0.360000</td>\n",
              "      <td>242.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>249.400000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>16.620115</td>\n",
              "      <td>95.510640</td>\n",
              "      <td>332.400000</td>\n",
              "      <td>0.390000</td>\n",
              "      <td>0.370000</td>\n",
              "      <td>630.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>295.300000</td>\n",
              "      <td>3.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>20.680850</td>\n",
              "      <td>99.250220</td>\n",
              "      <td>337.600000</td>\n",
              "      <td>0.430000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>642.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>301.200000</td>\n",
              "      <td>5.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>23.050525</td>\n",
              "      <td>104.649050</td>\n",
              "      <td>344.200000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.520000</td>\n",
              "      <td>700.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>305.600000</td>\n",
              "      <td>11.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30.984380</td>\n",
              "      <td>160.288860</td>\n",
              "      <td>367.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>0.780000</td>\n",
              "      <td>2048.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>377.200000</td>\n",
              "      <td>609.800000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           latitude     longitude  ...    bright_ti5           frp\n",
              "count  61403.000000  61403.000000  ...  61403.000000  61403.000000\n",
              "mean      19.606934    100.636421  ...    300.829821     14.381796\n",
              "std        4.884919      7.214471  ...      9.225304     30.164642\n",
              "min      -11.062080     88.003890  ...    249.400000      0.000000\n",
              "25%       16.620115     95.510640  ...    295.300000      3.100000\n",
              "50%       20.680850     99.250220  ...    301.200000      5.600000\n",
              "75%       23.050525    104.649050  ...    305.600000     11.800000\n",
              "max       30.984380    160.288860  ...    377.200000    609.800000\n",
              "\n",
              "[8 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "888e576e",
        "outputId": "5179c515-1fa2-4aa3-fcd6-39192f7dc866"
      },
      "source": [
        "# Check datatypes\n",
        "data.dtypes"
      ],
      "id": "888e576e",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "latitude      float64\n",
              "longitude     float64\n",
              "bright_ti4    float64\n",
              "scan          float64\n",
              "track         float64\n",
              "acq_date       object\n",
              "acq_time        int64\n",
              "satellite       int64\n",
              "confidence     object\n",
              "version        object\n",
              "bright_ti5    float64\n",
              "frp           float64\n",
              "daynight       object\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dadcdcac",
        "outputId": "b99433fc-1ad4-4f95-e0bc-c062e34770cc"
      },
      "source": [
        "# Check for null values (values contain no info and can be removed)\n",
        "data.isnull().sum()"
      ],
      "id": "dadcdcac",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "latitude      0\n",
              "longitude     0\n",
              "bright_ti4    0\n",
              "scan          0\n",
              "track         0\n",
              "acq_date      0\n",
              "acq_time      0\n",
              "satellite     0\n",
              "confidence    0\n",
              "version       0\n",
              "bright_ti5    0\n",
              "frp           0\n",
              "daynight      0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c31d3625"
      },
      "source": [
        "## Pre-visualization cleanup\n",
        "Note that there are no null values --> Data is relatively clean. However, the datatypes of certain columns need to be corrected for appropriate data analysis."
      ],
      "id": "c31d3625"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 710
        },
        "id": "ea820667",
        "outputId": "50e45ed5-d781-4ab2-cb9a-6f0441360e3c"
      },
      "source": [
        "# Concatenate acquisition date and time into a single column\n",
        "data['period']=data['acq_date']+' '+data['acq_time'].astype(str) # this leaves a df with acq_date and acq_time still there\n",
        "# data.drop(columns=['acq_date','acq_time'], inplace=True)\n",
        "data['period']=pd.to_datetime(data['period'], format='%Y-%m-%d %H%M')\n",
        "data['acq_date']=pd.to_datetime(data['period'].dt.date, format='%Y-%m-%d')\n",
        "data['acq_time']=data['period'].dt.time\n",
        "data.sort_values(by=['period'], inplace=True) # observe that without this code, time does not flow correctly in the animation\n",
        "# data.set_index('period', inplace=True) # sets the index of the dataframe to be the period\n",
        "data[:10]"
      ],
      "id": "ea820667",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>bright_ti4</th>\n",
              "      <th>scan</th>\n",
              "      <th>track</th>\n",
              "      <th>acq_date</th>\n",
              "      <th>acq_time</th>\n",
              "      <th>satellite</th>\n",
              "      <th>confidence</th>\n",
              "      <th>version</th>\n",
              "      <th>bright_ti5</th>\n",
              "      <th>frp</th>\n",
              "      <th>daynight</th>\n",
              "      <th>period</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-10.04099</td>\n",
              "      <td>149.90570</td>\n",
              "      <td>330.4</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.37</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>295.7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>-3.73083</td>\n",
              "      <td>143.32101</td>\n",
              "      <td>331.2</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.0</td>\n",
              "      <td>3.8</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>-3.86496</td>\n",
              "      <td>143.06902</td>\n",
              "      <td>343.6</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.51</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>290.5</td>\n",
              "      <td>14.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>-3.97043</td>\n",
              "      <td>143.80424</td>\n",
              "      <td>334.2</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.49</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.7</td>\n",
              "      <td>2.1</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>-4.09359</td>\n",
              "      <td>144.71913</td>\n",
              "      <td>344.1</td>\n",
              "      <td>0.43</td>\n",
              "      <td>0.46</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>292.4</td>\n",
              "      <td>6.0</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>-4.21646</td>\n",
              "      <td>144.90889</td>\n",
              "      <td>333.1</td>\n",
              "      <td>0.42</td>\n",
              "      <td>0.45</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>293.0</td>\n",
              "      <td>2.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>-4.34736</td>\n",
              "      <td>144.99658</td>\n",
              "      <td>341.2</td>\n",
              "      <td>0.42</td>\n",
              "      <td>0.45</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>293.5</td>\n",
              "      <td>4.3</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>-4.37743</td>\n",
              "      <td>144.99393</td>\n",
              "      <td>329.8</td>\n",
              "      <td>0.42</td>\n",
              "      <td>0.45</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>292.9</td>\n",
              "      <td>2.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>-4.48963</td>\n",
              "      <td>144.37625</td>\n",
              "      <td>338.8</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.47</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>291.3</td>\n",
              "      <td>10.5</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>-4.48902</td>\n",
              "      <td>144.38042</td>\n",
              "      <td>340.4</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.47</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>290.1</td>\n",
              "      <td>12.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:24:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    latitude  longitude  bright_ti4  ...   frp  daynight              period\n",
              "0  -10.04099  149.90570       330.4  ...   3.5         D 2021-04-01 03:24:00\n",
              "30  -3.73083  143.32101       331.2  ...   3.8         D 2021-04-01 03:24:00\n",
              "29  -3.86496  143.06902       343.6  ...  14.9         D 2021-04-01 03:24:00\n",
              "28  -3.97043  143.80424       334.2  ...   2.1         D 2021-04-01 03:24:00\n",
              "27  -4.09359  144.71913       344.1  ...   6.0         D 2021-04-01 03:24:00\n",
              "26  -4.21646  144.90889       333.1  ...   2.9         D 2021-04-01 03:24:00\n",
              "24  -4.34736  144.99658       341.2  ...   4.3         D 2021-04-01 03:24:00\n",
              "23  -4.37743  144.99393       329.8  ...   2.9         D 2021-04-01 03:24:00\n",
              "22  -4.48963  144.37625       338.8  ...  10.5         D 2021-04-01 03:24:00\n",
              "21  -4.48902  144.38042       340.4  ...  12.9         D 2021-04-01 03:24:00\n",
              "\n",
              "[10 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "433b5097"
      },
      "source": [
        "# 3 | Exploratory Data Analysis"
      ],
      "id": "433b5097"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "54918ff4"
      },
      "source": [
        "BUG: CELLS DO NOT WORK ON GITHUB; INTERACTIVE VISUALS <br>\n",
        "Tested working in Jupyter and VSCode <br>\n",
        "Github renders images statically and does not support interactive visuals"
      ],
      "id": "54918ff4"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 760
        },
        "id": "77104861",
        "outputId": "7c79d9d0-9192-404e-cdd9-8957ed4c9a2e"
      },
      "source": [
        "# Write animation to file\n",
        "fig1 = px.scatter_geo(data, \n",
        "                    lat='latitude', \n",
        "                    lon='longitude', \n",
        "                    scope='asia',\n",
        "                    center={'lat':2.2180,'lon':115.6628}, # centered to SEA\n",
        "                    color='confidence',\n",
        "                    animation_frame=data['period'].astype(str)) \n",
        "fig1.write_html('content/animation.html')\n",
        "# TODO: Fix animation to have constant legend \n",
        "\n",
        "# Display animation\n",
        "IFrame(src='content/animation.html', width=1080, height=720)"
      ],
      "id": "77104861",
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"1080\"\n",
              "            height=\"720\"\n",
              "            src=\"content/animation.html\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x7ff8f4a87610>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "9b3d9506",
        "outputId": "f6e98136-6ea7-4158-eecf-a26a0f9a626f"
      },
      "source": [
        "# FRP/confidence against time\n",
        "sns.relplot(x=\"period\", y=\"frp\", hue=\"confidence\", col=\"daynight\", data=data, height=8)"
      ],
      "id": "9b3d9506",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7ff8f4a9ce90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1228.25x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f851f132"
      },
      "source": [
        "We note that there seems to be some data where the gaps between data is small. Hence, this necessitates the merging of time data into hourly frames to better analyze patterns. "
      ],
      "id": "f851f132"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 710
        },
        "id": "fa05a5dd",
        "outputId": "861ccc18-a32e-4751-b364-93ad8f615dc3"
      },
      "source": [
        "# Processing data further to clean visualization\n",
        "\n",
        "# Generate new DFs with times rounded down to the nearest hour\n",
        "date_sorted = data\n",
        "date_sorted['period'] = date_sorted['period'].dt.floor('H')\n",
        "date_sorted_gb = date_sorted.groupby('acq_date') # returns a groupby object which can be called with below code\n",
        "\n",
        "# [date_sorted.get_group(x) for x in date_sorted_gb.groups] # this displays all the dataframes\n",
        "\n",
        "date_sorted.head(10)"
      ],
      "id": "fa05a5dd",
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>bright_ti4</th>\n",
              "      <th>scan</th>\n",
              "      <th>track</th>\n",
              "      <th>acq_date</th>\n",
              "      <th>acq_time</th>\n",
              "      <th>satellite</th>\n",
              "      <th>confidence</th>\n",
              "      <th>version</th>\n",
              "      <th>bright_ti5</th>\n",
              "      <th>frp</th>\n",
              "      <th>daynight</th>\n",
              "      <th>period</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-10.04099</td>\n",
              "      <td>149.90570</td>\n",
              "      <td>330.4</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.37</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>295.7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>-3.73083</td>\n",
              "      <td>143.32101</td>\n",
              "      <td>331.2</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.0</td>\n",
              "      <td>3.8</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>-3.86496</td>\n",
              "      <td>143.06902</td>\n",
              "      <td>343.6</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.51</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>290.5</td>\n",
              "      <td>14.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>-3.97043</td>\n",
              "      <td>143.80424</td>\n",
              "      <td>334.2</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.49</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.7</td>\n",
              "      <td>2.1</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>-4.09359</td>\n",
              "      <td>144.71913</td>\n",
              "      <td>344.1</td>\n",
              "      <td>0.43</td>\n",
              "      <td>0.46</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>292.4</td>\n",
              "      <td>6.0</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>-4.21646</td>\n",
              "      <td>144.90889</td>\n",
              "      <td>333.1</td>\n",
              "      <td>0.42</td>\n",
              "      <td>0.45</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>293.0</td>\n",
              "      <td>2.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>-4.34736</td>\n",
              "      <td>144.99658</td>\n",
              "      <td>341.2</td>\n",
              "      <td>0.42</td>\n",
              "      <td>0.45</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>293.5</td>\n",
              "      <td>4.3</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>-4.37743</td>\n",
              "      <td>144.99393</td>\n",
              "      <td>329.8</td>\n",
              "      <td>0.42</td>\n",
              "      <td>0.45</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>292.9</td>\n",
              "      <td>2.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>-4.48963</td>\n",
              "      <td>144.37625</td>\n",
              "      <td>338.8</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.47</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>291.3</td>\n",
              "      <td>10.5</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>-4.48902</td>\n",
              "      <td>144.38042</td>\n",
              "      <td>340.4</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.47</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>03:24:00</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>290.1</td>\n",
              "      <td>12.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    latitude  longitude  bright_ti4  ...   frp  daynight              period\n",
              "0  -10.04099  149.90570       330.4  ...   3.5         D 2021-04-01 03:00:00\n",
              "30  -3.73083  143.32101       331.2  ...   3.8         D 2021-04-01 03:00:00\n",
              "29  -3.86496  143.06902       343.6  ...  14.9         D 2021-04-01 03:00:00\n",
              "28  -3.97043  143.80424       334.2  ...   2.1         D 2021-04-01 03:00:00\n",
              "27  -4.09359  144.71913       344.1  ...   6.0         D 2021-04-01 03:00:00\n",
              "26  -4.21646  144.90889       333.1  ...   2.9         D 2021-04-01 03:00:00\n",
              "24  -4.34736  144.99658       341.2  ...   4.3         D 2021-04-01 03:00:00\n",
              "23  -4.37743  144.99393       329.8  ...   2.9         D 2021-04-01 03:00:00\n",
              "22  -4.48963  144.37625       338.8  ...  10.5         D 2021-04-01 03:00:00\n",
              "21  -4.48902  144.38042       340.4  ...  12.9         D 2021-04-01 03:00:00\n",
              "\n",
              "[10 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 528
        },
        "id": "89e0d6ad",
        "outputId": "b4b79d57-f4fc-45dc-f273-f6a8bb8f068b"
      },
      "source": [
        "# Plot individual plots for every date\n",
        "import numpy as np\n",
        "pd.options.mode.chained_assignment = None  # ignore warnings\n",
        "# list_date = date_sorted['acq_date'].unique()\n",
        "\n",
        "# Formatting of plot\n",
        "fig = plt.figure(figsize=(12,8))\n",
        "plt.xlabel('Time of Day (24H Format)')\n",
        "plt.ylabel('FRP')\n",
        "plt.xlim(0,2400)\n",
        "plt.xticks(np.linspace(0,2300,num=24), rotation=45)\n",
        "\n",
        "for x in date_sorted_gb.groups:\n",
        "    plt.title(str(x.date()))\n",
        "\n",
        "    # Data of plot\n",
        "    current = date_sorted_gb.get_group(x) # iterate through groups\n",
        "    current['acq_time'] = current['period'].dt.time # extract time\n",
        "    current['acq_time'] = current['acq_time'].apply(str) # convert to type string\n",
        "    current['acq_time'] = current['acq_time'].str.replace(':','').astype(int)/100 # convert to 24h format\n",
        "    plt.scatter(current['acq_time'],current['frp'])\n",
        "    plt.savefig('content/'+str(x.date())+'.png')"
      ],
      "id": "89e0d6ad",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "d462f310",
        "outputId": "d1fcc88c-58be-4eff-9928-124494d343d3"
      },
      "source": [
        "filenames = date_sorted['acq_date'].dt.date.unique().astype(str)\n",
        "filenames = [(value+'.png') for value in filenames]\n",
        "\n",
        "images = []\n",
        "for filename in filenames:\n",
        "    images.append(imageio.imread('content/'+filename))\n",
        "imageio.mimwrite('content/dailyfrp.gif', images, format='gif', duration=1)\n",
        "\n",
        "for item in images:\n",
        "    display(Image(data=item))"
      ],
      "id": "d462f310",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py:364: FormatterWarning:\n",
            "\n",
            "image/png formatter returned invalid type <class 'imageio.core.util.Array'> (expected (<class 'bytes'>, <class 'str'>)) for object: <IPython.core.display.Image object>\n",
            "\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "028e879b"
      },
      "source": [
        "Looking at the above visualizations, we can see that: \n",
        "- there tends to be a concentration of fire data within the same region\n",
        "- most fires are detected in the day\n",
        "- there seems to be a pattern in when the fires are detected within the same 7 day period\n",
        "\n",
        "We also notice a few points where the data is seemingly in the middle of the ocean.\n",
        "\n",
        "Consequently, this necessitates cleaning of data to remove unnecessary information. Feature selection is necessary. "
      ],
      "id": "028e879b"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "928d7f62"
      },
      "source": [
        "# 4 | Data Pre-Processing"
      ],
      "id": "928d7f62"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ccc80d1"
      },
      "source": [
        "## 4.1 | Cleaning Dataset"
      ],
      "id": "5ccc80d1"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1845ea24",
        "outputId": "50b7e0b0-c23b-46a1-d0e5-48c401d7dd93"
      },
      "source": [
        "# Convert 'object' columns into appropriate dtype\n",
        "data['confidence'].astype('category')\n",
        "data['daynight'].astype('category')"
      ],
      "id": "1845ea24",
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        D\n",
              "30       D\n",
              "29       D\n",
              "28       D\n",
              "27       D\n",
              "        ..\n",
              "60661    D\n",
              "60660    D\n",
              "60659    D\n",
              "60665    D\n",
              "61402    D\n",
              "Name: daynight, Length: 61403, dtype: category\n",
              "Categories (2, object): ['D', 'N']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "f11f2200",
        "outputId": "748e5c56-c820-4228-ccb8-b38b06959609"
      },
      "source": [
        "# Convert time into integers\n",
        "data['acq_time'] = data['acq_time'].apply(str) # convert to type string\n",
        "data['acq_time'] = data['acq_time'].str.replace(':','').astype(int)\n",
        "data.head()"
      ],
      "id": "f11f2200",
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>bright_ti4</th>\n",
              "      <th>scan</th>\n",
              "      <th>track</th>\n",
              "      <th>acq_date</th>\n",
              "      <th>acq_time</th>\n",
              "      <th>satellite</th>\n",
              "      <th>confidence</th>\n",
              "      <th>version</th>\n",
              "      <th>bright_ti5</th>\n",
              "      <th>frp</th>\n",
              "      <th>daynight</th>\n",
              "      <th>period</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-10.04099</td>\n",
              "      <td>149.90570</td>\n",
              "      <td>330.4</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.37</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>295.7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>-3.73083</td>\n",
              "      <td>143.32101</td>\n",
              "      <td>331.2</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.0</td>\n",
              "      <td>3.8</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>-3.86496</td>\n",
              "      <td>143.06902</td>\n",
              "      <td>343.6</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.51</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>290.5</td>\n",
              "      <td>14.9</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>-3.97043</td>\n",
              "      <td>143.80424</td>\n",
              "      <td>334.2</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.49</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.7</td>\n",
              "      <td>2.1</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>-4.09359</td>\n",
              "      <td>144.71913</td>\n",
              "      <td>344.1</td>\n",
              "      <td>0.43</td>\n",
              "      <td>0.46</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>292.4</td>\n",
              "      <td>6.0</td>\n",
              "      <td>D</td>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    latitude  longitude  bright_ti4  ...   frp  daynight              period\n",
              "0  -10.04099  149.90570       330.4  ...   3.5         D 2021-04-01 03:00:00\n",
              "30  -3.73083  143.32101       331.2  ...   3.8         D 2021-04-01 03:00:00\n",
              "29  -3.86496  143.06902       343.6  ...  14.9         D 2021-04-01 03:00:00\n",
              "28  -3.97043  143.80424       334.2  ...   2.1         D 2021-04-01 03:00:00\n",
              "27  -4.09359  144.71913       344.1  ...   6.0         D 2021-04-01 03:00:00\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "827f837b",
        "outputId": "e8936c21-6def-41ac-c083-e76d3d775600"
      },
      "source": [
        "# Resetting index for OHE preparation\n",
        "data.set_index('period', inplace=True)\n",
        "data.reset_index(inplace=True)\n",
        "data.head()"
      ],
      "id": "827f837b",
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>period</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>bright_ti4</th>\n",
              "      <th>scan</th>\n",
              "      <th>track</th>\n",
              "      <th>acq_date</th>\n",
              "      <th>acq_time</th>\n",
              "      <th>satellite</th>\n",
              "      <th>confidence</th>\n",
              "      <th>version</th>\n",
              "      <th>bright_ti5</th>\n",
              "      <th>frp</th>\n",
              "      <th>daynight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "      <td>-10.04099</td>\n",
              "      <td>149.90570</td>\n",
              "      <td>330.4</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.37</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>295.7</td>\n",
              "      <td>3.5</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "      <td>-3.73083</td>\n",
              "      <td>143.32101</td>\n",
              "      <td>331.2</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.0</td>\n",
              "      <td>3.8</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "      <td>-3.86496</td>\n",
              "      <td>143.06902</td>\n",
              "      <td>343.6</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.51</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>290.5</td>\n",
              "      <td>14.9</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "      <td>-3.97043</td>\n",
              "      <td>143.80424</td>\n",
              "      <td>334.2</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.49</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>287.7</td>\n",
              "      <td>2.1</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-04-01 03:00:00</td>\n",
              "      <td>-4.09359</td>\n",
              "      <td>144.71913</td>\n",
              "      <td>344.1</td>\n",
              "      <td>0.43</td>\n",
              "      <td>0.46</td>\n",
              "      <td>2021-04-01</td>\n",
              "      <td>32400</td>\n",
              "      <td>1</td>\n",
              "      <td>nominal</td>\n",
              "      <td>2.0NRT</td>\n",
              "      <td>292.4</td>\n",
              "      <td>6.0</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               period  latitude  longitude  ...  bright_ti5   frp  daynight\n",
              "0 2021-04-01 03:00:00 -10.04099  149.90570  ...       295.7   3.5         D\n",
              "1 2021-04-01 03:00:00  -3.73083  143.32101  ...       287.0   3.8         D\n",
              "2 2021-04-01 03:00:00  -3.86496  143.06902  ...       290.5  14.9         D\n",
              "3 2021-04-01 03:00:00  -3.97043  143.80424  ...       287.7   2.1         D\n",
              "4 2021-04-01 03:00:00  -4.09359  144.71913  ...       292.4   6.0         D\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "84397066",
        "outputId": "a1611ef7-3744-4dac-c315-0e6839645ef5"
      },
      "source": [
        "# Converting latitude and longitude values to location values\n",
        "\n",
        "world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n",
        "gdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data['longitude'], data['latitude']), crs='EPSG:4326')\n",
        "result = gpd.sjoin(gdf, world, how='left')\n",
        "result.head()"
      ],
      "id": "84397066",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ImportError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-a633ff9d3dca>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mworld\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'naturalearth_lowres'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGeoDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgeometry\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoints_from_xy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'longitude'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'latitude'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'EPSG:4326'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mworld\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopandas/tools/sjoin.py\u001b[0m in \u001b[0;36msjoin\u001b[0;34m(left_df, right_df, how, op, lsuffix, rsuffix)\u001b[0m\n\u001b[1;32m     87\u001b[0m     \u001b[0m_basic_checks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlsuffix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrsuffix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m     \u001b[0mindices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_geom_predicate_query\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m     \u001b[0mjoined\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_frame_join\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlsuffix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrsuffix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopandas/tools/sjoin.py\u001b[0m in \u001b[0;36m_geom_predicate_query\u001b[0;34m(left_df, right_df, op)\u001b[0m\n\u001b[1;32m    177\u001b[0m             \u001b[0;31m# keep them the same\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m             \u001b[0mpredicate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 179\u001b[0;31m             \u001b[0msindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mright_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msindex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    180\u001b[0m             \u001b[0minput_geoms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mleft_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeometry\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopandas/base.py\u001b[0m in \u001b[0;36msindex\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2628\u001b[0m                [2]])\n\u001b[1;32m   2629\u001b[0m         \"\"\"\n\u001b[0;32m-> 2630\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeometry\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msindex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2631\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2632\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopandas/array.py\u001b[0m in \u001b[0;36msindex\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    307\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 309\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_sindex_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    310\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sindex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopandas/sindex.py\u001b[0m in \u001b[0;36m_get_sindex_class\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mRTreeIndex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     raise ImportError(\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0;34m\"Spatial indexes require either `rtree` or `pygeos`. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m         \u001b[0;34m\"See installation instructions at https://geopandas.org/install.html\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     )\n",
            "\u001b[0;31mImportError\u001b[0m: Spatial indexes require either `rtree` or `pygeos`. See installation instructions at https://geopandas.org/install.html",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0eT5IQGz9A68"
      },
      "source": [
        "# Remove irrelevant geometric information\n",
        "result.drop(['geometry','index_right','pop_est','iso_a3','gdp_md_est'],axis=1,inplace=True)\n",
        "result.head()"
      ],
      "id": "0eT5IQGz9A68",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_06Vobj49A69"
      },
      "source": [
        "# Check for null values\n",
        "result.isnull().sum()"
      ],
      "id": "_06Vobj49A69",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fB572Kga9A6-"
      },
      "source": [
        "# Above means there are null values present. \n",
        "# Solution: remove rows\n",
        "result.dropna(inplace=True)\n",
        "result.reset_index(drop=True) # reset index of dataframe to account for missing values\n",
        "result.isnull().sum()"
      ],
      "id": "fB572Kga9A6-",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bPbgDCNa9A6_"
      },
      "source": [
        "# Visualize clean dataset\n",
        "result.head()"
      ],
      "id": "bPbgDCNa9A6_",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "37e85c36"
      },
      "source": [
        "# # One Hot Encoding\n",
        "# from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "# enc = OneHotEncoder(handle_unknown='ignore')\n",
        "\n",
        "# ohe_confidence = pd.DataFrame(enc.fit_transform(data[['confidence']]).toarray())\n",
        "# ohe_confidence.columns = enc.get_feature_names(['confidence'])\n",
        "# # ohe_confidence.head()\n",
        "\n",
        "# ohe_daynight = pd.DataFrame(enc.fit_transform(data[['daynight']]).toarray())\n",
        "# ohe_daynight.columns = enc.get_feature_names(['daynight'])\n",
        "# # ohe_daynight.head()\n",
        "\n",
        "# data = pd.concat([data, ohe_confidence, ohe_daynight], axis=1)\n",
        "# data.drop(['confidence', 'daynight'], axis=1, inplace=True)\n",
        "# data.head()"
      ],
      "id": "37e85c36",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "42979cc0"
      },
      "source": [
        "## 4.2 | Feature Selection"
      ],
      "id": "42979cc0"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E6ML0vR3Almd"
      },
      "source": [
        "# Models - Supervised Learning\n",
        "In this section, we shall be using our dataset o train two different models to attempt to predict a value of FRP (Fire Radiative Power). The two relevant features that we are using to predict FRP values would be bright_ti4 and bright_ti5. "
      ],
      "id": "E6ML0vR3Almd"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I0GVozpBEfEh",
        "outputId": "46788a7f-831f-4688-cfc2-2c6813db8737"
      },
      "source": [
        "#cleaning\n",
        "#we can set this data afterwards the features are selected, for now I'll just use ti columns\n",
        "data_xs = data[['bright_ti4', 'bright_ti5']]\n",
        "data_y = data[['frp']]\n",
        "\n",
        "print(data_xs[:5], data_xs.shape)\n",
        "print(data_y[:5], data_y.shape)"
      ],
      "id": "I0GVozpBEfEh",
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   bright_ti4  bright_ti5\n",
            "0       330.4       295.7\n",
            "1       331.2       287.0\n",
            "2       343.6       290.5\n",
            "3       334.2       287.7\n",
            "4       344.1       292.4 (61403, 2)\n",
            "    frp\n",
            "0   3.5\n",
            "1   3.8\n",
            "2  14.9\n",
            "3   2.1\n",
            "4   6.0 (61403, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "Fiz7tng6BnkZ",
        "outputId": "bde5bb19-a6e1-4946-cd84-a7b342fd73b6"
      },
      "source": [
        "#visualization\n",
        "def scatterplot_XY(x, y):\n",
        "  plt.scatter(x, y, s=60, c='r', marker='+', label='Class0')\n",
        "  #plt.xlabel(x.keys())\n",
        "  plt.ylabel('frp') \n",
        "  plt.show()\n",
        "  plt.clf()\n",
        "\n",
        "\n",
        "for column in data_xs:\n",
        "  x= data_xs[column]\n",
        "  y = data_y\n",
        "  scatterplot_XY(x, y)"
      ],
      "id": "Fiz7tng6BnkZ",
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oK3JXGd_GpcT"
      },
      "source": [
        "Train-Validation-Test Split"
      ],
      "id": "oK3JXGd_GpcT"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rj0KTw5GBUys"
      },
      "source": [
        "## 4.1 | Linear Regression Model\n",
        "Firstly, we shall be attempting to use a linear regression model to predict the continuous FRP values"
      ],
      "id": "rj0KTw5GBUys"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dBc84uMBGaB8",
        "outputId": "341e747a-8963-4ed6-ab73-41cf66fd258e"
      },
      "source": [
        "# data for the models here\n",
        "data_xs = data_xs\n",
        "data_y = data_y\n",
        "\n",
        "#train-test split\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(data_xs, data_y, test_size=0.2, random_state=0)\n",
        "\n",
        "print(X_train.shape, y_train.shape)\n",
        "print(X_test.shape, y_test.shape)\n"
      ],
      "id": "dBc84uMBGaB8",
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(49122, 2) (49122, 1)\n",
            "(12281, 2) (12281, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Afp_QSzGh5d",
        "outputId": "a50c6b4a-dee8-4005-e065-322f02823579"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        " \n",
        "def linear_reg(X,y):\n",
        "  reg = LinearRegression().fit(X, y)\n",
        "\n",
        "  #R^2 value, which is between -1 and 1\n",
        "  print(\"Model Loss of R^2:\", reg.score(X, y))\n",
        "\n",
        "  print(\"Coeffcients [x1,x2] : \", reg.coef_)\n",
        "  print(\"Intercept:\", reg.intercept_)\n",
        "  return reg\n",
        "\n",
        "reg_train = linear_reg(X_train, y_train)"
      ],
      "id": "-Afp_QSzGh5d",
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model Loss of R^2: 0.16653292399690323\n",
            "Coeffcients [x1,x2] :  [[0.25498814 1.07349131]]\n",
            "Intercept: [-394.40665622]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IALhd7DjN8w1",
        "outputId": "14a04958-0755-44bb-c2ef-b3914b645cfd"
      },
      "source": [
        "y_pred = reg_train.predict(X_test)\n",
        "\n",
        "print(y_pred[:5], type(y_pred), y_pred.shape)\n",
        "\n",
        "df = pd.DataFrame(data=np.concatenate((y_test,y_pred),axis=1), columns=[\"Actual\",\"Predicted\"])\n",
        "\n",
        "print (df[:5])\n",
        "\n",
        "def loss_mse(y_pred, y_test):\n",
        "  n = len(y_pred)\n",
        "  total = (y_pred-y_test).T.dot(y_pred-y_test)\n",
        "  loss = 1/n* total\n",
        "  return loss\n",
        "\n",
        "loss = loss_mse(y_pred, y_test)\n",
        "print(\"Loss Test Set\", loss)\n",
        "\n",
        "y_pred_train = reg_train.predict(X_train)\n",
        "loss = loss_mse(y_pred_train, y_train)\n",
        "print(\"Loss Train set:\", loss)\n",
        "\n",
        "from sklearn import metrics\n",
        "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\n",
        "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\n",
        "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n"
      ],
      "id": "IALhd7DjN8w1",
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 9.230589  ]\n",
            " [-1.68617187]\n",
            " [-8.28446759]\n",
            " [20.50914381]\n",
            " [20.7748397 ]] <class 'numpy.ndarray'> (12281, 1)\n",
            "   Actual  Predicted\n",
            "0     3.8   9.230589\n",
            "1     1.0  -1.686172\n",
            "2     0.4  -8.284468\n",
            "3     4.2  20.509144\n",
            "4     2.8  20.774840\n",
            "            frp\n",
            "frp  743.923811\n",
            "            frp\n",
            "frp  761.054533\n",
            "Mean Absolute Error: 14.44624261639326\n",
            "Mean Squared Error: 743.9238113225384\n",
            "Root Mean Squared Error: 27.27496675199694\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "koCU9xEBMs5S",
        "outputId": "3738b947-cde5-4d83-fcf9-2090a1b17cbe"
      },
      "source": [
        "#attempt at visualization\n",
        "def scatterplot_wmodel(x,y,f_pred):\n",
        "  plt.scatter(x, y, s=60, c='r', marker='+', label='Class0')\n",
        "  #plt.xlabel(x.keys())\n",
        "  plt.ylabel('frp') \n",
        "\n",
        "  x_pred = np.linspace(min(x),max(x),100)\n",
        "  y_pred = f_pred(x_pred)\n",
        "  plt.plot(x_pred, y_pred)\n",
        "  plt.show()\n",
        "  plt.clf()\n",
        "\n",
        "i = 0\n",
        "for column in data_xs:\n",
        "  x= data_xs[column]\n",
        "  y = data_y  \n",
        "  x_pred = np.linspace(min(x),max(x),100)\n",
        "  y_pred = reg_train.coef_[0][i]*x_pred + reg_train.intercept_\n",
        "  plt.plot(x_pred,y_pred) \n",
        "  \n",
        "  plt.scatter(x, y, s=60, c='r', marker='+', label='Class0')\n",
        "  plt.show() \n",
        "  i += 1\n",
        "  plt.clf()\n",
        "\n"
      ],
      "id": "koCU9xEBMs5S",
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAD4CAYAAADlwTGnAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO2de5BcV3ngf59Gr5ElzYwtWZZHEnJAEB7rCDPYZlEiYUMAJ7VOUjyc7BJDOauqBJKQbDZAUnlsKtlyNltJICFmtZjETkiMQ2Ct2hgSAkhZVwWDDMIQTIJCINb4IRk8Iw3SyNLo7B/3npmvz5z76O7b3be7v1/V1Ny+z9O37/2+c77XEecchmEYxvCxotcNMAzDMHqDKQDDMIwhxRSAYRjGkGIKwDAMY0gxBWAYhjGkrOx1A8qwadMmt3Pnzl43wzAMo6946KGHnnLObc7a3hcKYOfOnRw5cqTXzTAMw+grROSbedvNBGQYhjGkmAIwDMMYUkwBGIZhDCmmAAzDMIYUUwCGYXSGffuSP6O2mAIwDMMYUkwBGIZhDCl9kQdgGEafoE0+hw8vX3foUBcbYxRRyQhARMZF5MMi8lUReUREXiYil4rIJ0Tka+n/iXRfEZH3iMgxEXlYRK6pog2GYRhGc1Q1Ang38HHn3OtEZDWwDvgl4JPOudtF5J3AO4F3AK8FdqV/1wF3pP8Nw+h3dA/f9/yt119b2h4BiMgY8H3AnQDOuWecczPAzcBd6W53AT+ULt8M3O0SPgOMi8jWdtthGIZhNEcVJqCrgJPAH4vIF0Tk/SJyCbDFOfd4us8TwJZ0eRJ4VB1/PF3XgIjsF5EjInLk5MmTFTTTMAzD0FShAFYC1wB3OOdeDHyHxNyziEsmHm5q8mHn3AHn3JRzbmrz5sxidoZh1JVDh8z8U3OqUADHgePOuQfTzx8mUQhPetNO+v9Eun0a2K6O35auMwzDMLpI2wrAOfcE8KiIPC9ddSPwFeAgcGu67lbgvnT5IPDjaTTQ9cCsMhUZhmEYXaKqKKCfBj6YRgB9HXgLiXK5V0RuA74JvCHd937gJuAYcCbd1zAMw+gylSgA59xRYCqy6cbIvg54axXXNQzDMFrHSkEYhmEMKaYADMMwhhRTAIZhGEOKKQDDMIwhxRSAYRjGkGIKwDAMY0gxBWAYhjGkmAIwDMPm7x1STAEYhtG/mOJqC1MAhmEYQ4rNCWwYw4rN3zv0mAIwDKO/MMVVGaYADGNYqcP8vYM0b/D4ePJ/Zqa37WgCUwCGYfQXdVBcA4I5gQ3DMIYUGwEYhtHdHvQg2fC92Qdgdnb5upqbg0wBGIbRv/STsqghpgAMY9jpth19kGz4uoffh07gSnwAIvINEfmSiBwVkSPpuktF5BMi8rX0/0S6XkTkPSJyTEQeFpFrqmiDYRiG0RxVOoFf4Zzb7ZzzcwO/E/ikc24X8Mn0M8BrgV3p337gjgrbYBiGYZSkkyagm4F96fJdwCHgHen6u9PJ4T8jIuMistU593gH22IYhqYujth+Nf3E6CPTj6eqEYAD/lZEHhKR/em6LUqoPwFsSZcngUfVscfTdQ2IyH4ROSIiR06ePFlRMw3DMAxPVSOAPc65aRG5HPiEiHxVb3TOORFxzZzQOXcAOAAwNTXV1LGGYRQwSI5Yo2UqGQE456bT/yeAjwLXAk+KyFaA9P+JdPdpYLs6fFu6zjAMw+gibSsAEblERDb4ZeD7gS8DB4Fb091uBe5Llw8CP55GA10PzJr93zAMo/tUYQLaAnxURPz5/tw593ER+Rxwr4jcBnwTeEO6//3ATcAx4AzwlgraYBhGq5jpZ2hpWwE4574OfE9k/beAGyPrHfDWdq9rGIZhtIcVgzMMwxhSTAEYw0XeHLI2v6zRLWryrJkCMIxBoybCxag/pgAMwzCGFKsGagw+eWUPjh6F3bvj28AiZIzqqEv5DYUpAMMYBGooXIz6YwrAGHzKlj2wkghGJ6lh+Q1TAIYxCNRQuBj1x5zAhmEYQ4qNAIzhIq9XbD1mo1vU5FkzBWAYg0ZNhItRf8wEZAwHlhxl9IKaP3emAAxjkGhF4FQppGou8IxGTAEYhlFfTKF0FPMBGIOLJUcZvaCPnjtTAMbw0s9JYbp9rQicKoVUpwXe0aPJ+er6W5RBlxypEaYAjMGlKDnKTAv1JKZQvBKA+iuC8Bnzwr+G7a5MAYjICHAEmHbO/aCIXAXcA1wGPAS8yTn3jIisAe4GXgJ8C3ijc+4bVbXDMIaOVrKAq8wctizkvqXKEcDPAo8AG9PPvw38nnPuHhF5H3AbcEf6/2nn3HNE5JZ0vzdW2A7DyKafK4P2kW25LbRZa2wMZmeTP08Zc1CvFZF+pmZnk9+rhr9VJVFAIrIN+AHg/elnAW4APpzuchfwQ+nyzeln0u03pvsbRuc4dKg2L50xRNTQ7q+pagTw+8AvAhvSz5cBM865C+nn48BkujwJPArgnLsgIrPp/k9V1BbDyKafK4OWaXu75qB2qepc/jz79sEDD8D69fX6LYroE7NY2wpARH4QOOGce0hE9rXfpMXz7gf2A+zYsaOq0xqG0U8cOgTj4+X2HRYTWYVUYQJ6OfAfROQbJE7fG4B3A+Mi4hXMNmA6XZ4GtgOk28dInMENOOcOOOemnHNTmzdvrqCZhmE0Td0SserWnj6n7RGAc+5dwLsA0hHALzjn/qOI/CXwOhKlcCtwX3rIwfTzP6TbP+Wcc+22wzCi5A2/+60yqP4uWe0blF6wbrN3APuQyizqanapQxsy6GQewDuAe0TkN4EvAHem6+8E/lREjgHfBm7pYBsMozx1Ehox8oSf0Rvq/swUUKkCcM4dAg6ly18Hro3sMw+8vsrrGoaRUkUvuA6jCH0N7QPQo4FutmdAsUxgo960IsTqIMCqIssU4umn7wLd6zHXPU+gJpgCMLpPL1++sK5M3ZVFzOzTaVNQ3WzpPpZeJ4j1sj11f2aawBSAMXjkCbB+iyDRiURe2JRNLup1FmzVOQFG5ZgCMDpPswKhmz2suvV2wzbEbOH9JhDr0mOuqh11e2bawBSA0R10NcduCoGjR2FuLn5tb0qZmVl+XJ+/2JVRt+9ft/a0Qw2eMVMARv2osoe1e3e2HX1uLikx0Ardfnn99ULzTw2ECFC+d91ue9s5vt3nqhP3usdzHZgCMDpDTCB4xsa6Wx9dX0u3K5yko9c2c8gXnjWtKd8x6qLc8qhz20pgCsAYPPIEqi8sBsvL9JYtB60n+ehnqhCweRPt9Llw7Ag1m+zGFIDRGaqKxGkliSlLOB89CgsLielnYaFxfdlz+/2rrPGeda/88r59cd/F7t31CkMs87u20rZOOJF7GZAQPm+zs0vrumwOMgVgdJ9OP+Axk48WqLD0MntzVNiufp5Csp974Fm/US/bUSX6OfQdCejZaNIUgDE8tDNXaywjVwumTmSeljGrlFVUsXWt9mizesV5UVXtEBOOnVBusXvZCdNWzJRoTmBjYKnaxpy1D+RP89gP9GOvHRp7s+2YSAZlFNYnmAIw+oNme18PPJD837Mn+5i8nle4vp3RQx5V9SqLlCAsb2+riWWxc2h/RLdpNdEw3F/b4WOjo6oJzZI9wBSA0R51sDfHeoj+ZS4r4JuljPCv0oFY9D1igsTfA+/0Pny4UWBXQbfr9FR97phpLysooBPfq8cjPlMARu/JixIKHYE9TJqpNfreacc2NJpntJDrZnVRr3ia8Q/06nfWyYPtRC31wXNqCsCoL7onpgVX1gs2Pp70dmEpzFPXkq/KOdluzZis8M5mz5+H9n1op7WOOqnCZJPV1k4LwWZHV2X2z4oYG2BMARjN0+niXmGUBJQPl9NJXkYjXjl6/Kiq01U79+1rr+yG0TFMARi9oYwSifXE8oSV7uG3YnLoxtA9y9xVRaQULN3LvXuX1o2MNCa+wVItpE7gFffc3NKobGEhUcpVjciKRldl9y9z/jLEnOF1SM4roG0FICJrgb8H1qTn+7Bz7tdE5CqSCeEvAx4C3uSce0ZE1gB3Ay8BvgW80Tn3jXbbYXQRS/tvnlayoNtBm4B8z1sLp6wiee2gBb9XOGHWdZ0Zwme4ihHAOeAG59yciKwCHhCRjwE/D/yec+4eEXkfcBtwR/r/aefcc0TkFuC3gTdW0A6jnyirRKoUnHVWVlVWuQxDVPW525lToN37NzISz7oeBOo2a1lJ2lYAzjkH+LHkqvTPATcAP5auvwv4dRIFcHO6DPBh4A9FRNLzGP1AM1mpVZ2/2XOWNS902p9R9hqdjjfvNLr9eT3+Tk5nWdapXtX9KMqI7gMq8QGIyAiJmec5wHuBfwFmnHMX0l2OA5Pp8iTwKIBz7oKIzJKYiZ4Kzrkf2A+wY8eOKpppdII+6OUMBdq2nleorhNZ0TFnvWZsbMkJ3Ous7HZ8MN2KbOq3YnDOuQVgt4iMAx8FvruCcx4ADgBMTU3Z6GCQ6YbTFZZ6aStXJhnC4bU79QJWFQ4aOzbcpyi8s0xJjazSC1nZsbEy2h4/Guik8O+VT2oAfGGVRgE552ZE5NPAy4BxEVmZjgK2AdPpbtPAduC4iKwExkicwUadKRruthv90I4pplM1Y+r6Ums7v6dVG3SZfYtMGtrf4KN+1q9fGg14R/ADDywphDpHyNT1d+8AVUQBbQbOp8J/FHgViWP308DrSCKBbgXuSw85mH7+h3T7p8z+b3SMUCn4CWHqkOHZag/SR9pkzbPcjg06nKKwKBQ33Oaji8Lefp6JqFXK3rNY58KbzGLZ0EXHVqm8uuGDyqGKEcBW4K7UD7ACuNc5939F5CvAPSLym8AXgDvT/e8E/lREjgHfBm6poA1GpykjrKqMZMk6T9lr6Mngw5o4WfHodTQbxASER08kEuK/e9G5vULUZqiiGaryhJaOQMqLz+/Uve5Vr72Z69ZohFFFFNDDwIsj678OXBtZPw+8vt3rGkPIypWJAN+7N79XB42lI8omPIWmlayqmnmCtVMvd1GvPpxnWfsXwvbo7+MVYnj+WGVMPf9Blj1ftyHvHPoedlo55CndWM9fP0+dDu/ssR/BMoGNwUc7fL2NuplSzqH5ohNzuGadR9vWR0aSZR1mWWV0jc8Ynp1dEtRaMehrZUXR7Nu3JNybaZP2JeWRp/j1sTXoXfcDpgCM5ikSVu2gX/DQrOAF3+HDjaUO9HLRfKt6v6wwybAWUVaESyu0avPVmbvajq6Ff8wnEPa49bX8ebxiCa+nyZpTII92eretKNiySiRGUTJdGVo1m2Ud0wVMARj1xr8sofCN1bxphZiZwvcowwJmvpqmFsChCaFTL/ehQ4kJLMQ7g2FJSej2haOWmCnJK5EsId+JJDWt3HV79ZwFMYraVWQqy0sKC9uUlUsR7t/pUWAHMQVg9AdhQTPfa82yzepwxDBc8vDhpZFBkX/AC9iqYtjb6RWvX7+8vQsL2d9B3zPf/ljPPmbS8cthbZ9wUhl//2PRSJ6s75d1/2dnk7bnVQ+NJZ/571skuIvoRJG8muYMmAIwuk+WIy7sDWp0XPnevcVlImLFzmLmIY+fQlLXq/HHaEFXZBro5Ms9M7PUBt127+PweOWolV9Wzznru2gBq+99q8R63lm/u/ZFFAlyLax1B6EVc1DM9Fcm2qwV5VcTTAEY3SW0q8eSmsqeB4pfMN+D98ITGhOSPP6z70FqfK939+7elzIIE6688I/5B2ZnG8M8PXkROVoIFo0WYm1rRgGGAtcL8zIKJzwWGie+aaboXNjmvJFh7D72Ue2fEFMARueI9fR1EpMnzCT160KbtLeBx+LKYzHn2tyjQ/r27FkSZmGOQBZamLajBHQ720lG04RmGo3vST/wwPKRgv4e7dj59W/ZjDDUIwA9k5uOQoL8+xQ+C604b/1x/jzNRntpJ3zs2uE5ajQqMAVgdIfQnuyH90UCQyuLCxeW1nuTjSaM7AnPE9s/nEJSo23o3iZdJFy69XLrEY0WQGHPOSZIs3IDYlNwanOSv0ZRgllZwt++ClOTpmyiXdYzGEZXhUq7TE5BzTEFYHSemDMRGk0xYWq+NsPojF7fa9fHNTO5iTY3lXGe+mXtbI0JwFZt/81kA+dFsHhC53fYQ9bZv1lk2dX1fY6FkzYrAP11dJ5Gs0lh4civbO8/5n/oxAQ5rexviWBG35GXURmbkhDyTS7hMVkvp4/m8S+xHhloIbew0Gh+CpWGVk4+2ibmJyjKBs7LvIXWsov19IoxYZvlHPU917BOUFiQLcv5HkYR6RFT7PcoU+xNr/f7xpRKK0KwlWOKIn6aySTPGlGV+c1a9YW1iSkAo/NkCVQd6ufr8cSqSerpBWOmHy28FhaWBFfWi6vXh+aTkZGltvjSE5peO4GL0N8n9LV4wkinMugR3OHDjaYlTxkTjva5eLTybnfi+DIJVzElpB3HodDPCi2tkS2/VUwBGNVSZCPVL5eOYAnDG0NB0optOBTeYcKR/q+P8e0OzUAhRZE1njK29tDhGDOx6POXycYOo570d9VCXCuDWIRUjDzzWV77iihTCqKoXlNZ5ZZn+y8yB2WZa2K/W5ZDOzRrhslnrTq0m8AUgNE6Rb2tkNDp6oVQVk+1VdqdhDxrUhOIC5gsgZ5HmZIVsX28gK0y1lxfJ+/ehQoxVkIiJEtQ6tGCdjTnOarLkFenqCyx3zMU4lU4fPUoTSv5LoaVmgIwukcszlv3tmZmGsswhMLIv4RlRwOx7OGFhSWl04qiyArzC+29eb3IMNFMHxPbV++TZSIp8sF4dK8/FktfFm0yOXx4yXQWtiM8r/6OWtE2E14bCxtuVwnGJtdphbxSFbE2+u+tR5BdNDOaAjBap5n09n374pEpYW8qFI6aZqJ9oNEf4P0NZR16Wmh6oZs1HA+zWj3NOv/C+1mUgVw02vJoRaft7aHjOVZmwuN/F++DiUUYQbEg1tu9j6UovDY20syb0KVMRJU+Vv/W4f2NmclCx3rRdbN+s9C0F97/LmQWmwIw6o0WPGXt05qY8CvT+4+VXK4DsTkPYpPbaCHVLiMjyxWKz47WjvqYQsoT0F4hx5SJFvStlrxupsZSHlnKbgAwBWB0ljDU0Du5fE8yrze1cuVSBqt/SfMSt6BcyGkYlRSL+w+PLbItx0wSZcwTWrA061Px6O+iM561bV33dsMet26DVho6Sqto9KVt5LHQSX1sGIXjn4ms+j1ZI0d9rrK1mbKcsHlmPU+WM9+3y9/7vIzfrHPk1WwyJ7BRe7Ji4mM1anSRsTy0ycYLIH9MM36AUADGyiYXHRuLztDoCCdfeyer95sllPKEfawX6pWo/n66ZIVXCuH39OG0RfZ6HX7rv3M4qtCF2/Tx4e+U5d/Q54vNvuXJE4JhdnIzglPXpApNeXllv2NtaLaKqD6mRyGlVUwKvx24G9gCOOCAc+7dInIp8CFgJ/AN4A3OuadFRIB3AzcBZ4A3O+c+3247jB6T9dKF4XqxQl1Zx8aygiE/+iTWe/fRM1mjBr0+a7kbZPX+/LI2uWjCcsihY1GTVTHTXydmZitr/grDe/U1sgRcbJSUl0TVg2SpQvbtKyf8s57zKstrNEkVI4ALwH9xzn1eRDYAD4nIJ4A3A590zt0uIu8E3gm8A3gtsCv9uw64I/1vDApZ2bBZjkyd6QrFL1PYu8wT7h5d7TPPlxBGCOkMWC2UwhGBb7dXOPpc0J2XOytzuuj+6BwEbQrzxKJ7IH8kFUYg6R62Lqqn/RhlBHv4/MRGCzqctigZLMsElxX+qYsV+udAkzVfgiY0gfnRU565qkNUMSn848Dj6fJpEXkEmARuBvalu90FHCJRADcDdzvnHPAZERkXka3peYxBoWyvRg+Di+z7nnBU0W5PXdvKdc39MAon1vYsM1KYsVwmQzWL2MggFm2U9Tnr/oTzIYSlM7Twjn3/rHyJMLyzWcrYwctEBuX5LGJKIpbdHO5b5tx5HZis363qiYdKUqkPQER2Ai8GHgS2KKH+BImJCBLl8Kg67Hi6rkEBiMh+YD/Ajh07qmymURVZQi3LHpoV6qcdvFllIzTtRreE1wtfulivLevF9IK+VbNJFs34VKogNBtp236s/EYRXnn4qKQYvketI4GgnA0/5jAOnzntuG7GH6Cv0axADp3ssd8sFvKpn58umoMqUwAish74K+DtzrlTiak/wTnnRMQ1cz7n3AHgAMDU1FRTxxo9JKyumGUOgrgppmrBFiM25WBRFIn+Xl647dmz3N6tndaQCFQ9if3Ro0t+kE695GVMYnpfPfLxaMdyLH9C51VkJex5YkJwdrax1lKRkz0kz2HsCbflxeD7/fW+RdFBscRE3aHw+8aeaX1Pw2k7u0glCkBEVpEI/w865z6Srn7Sm3ZEZCtwIl0/DWxXh29L1xn9hn45fE9OE5Y38Pv7dd12smq0rf7o0eV227zIHF3FMuzV5ZVI0AXnQsr0enWbdARQGNLaSl19fU5obGescqpWfLotkO0zCCnz+5dVknpEoNvaqbIKobD2I6fQ7h9m+Yb7hI74LlNFFJAAdwKPOOd+V206CNwK3J7+v0+tf5uI3EPi/J01+/8A4F+83bsbe/ZZ4X9QLhSzU+hecl6iVyh09X765dZCWJeN9gJZO0BbRSvZrBBPrdjK4PfPixjSI5v16xu/TxZ+e154ZZh/keVk1+fzhIlieiShfRf6+SuKsgrbX4R+NvTvnHWtZs7dJaoYAbwceBPwJRHx6vaXSAT/vSJyG/BN4A3ptvtJQkCPkYSBvqWCNhi9JlZ6IKsKYpg0VRXNmD7K7BcTOLEZt3SPOOYY1bOfhbZeKBYIoQDp9shJC1ivCPSIKZxqMkasDHTse5QJpwx79eEoqFn/SxmBHJqPQpOVN/00k4OQF2DQJaqIAnoAkIzNN0b2d8Bb272uUTPy7JfexBIOc5tNnCmiVcGoe82HDye26TJCRCe06d6gHtZ7hRD6O/znkZHGSJSscEh9rapHTTGzUVFGtb5fsQJzIeHIMLxOVgSWJuse+3Z4tGlP5xHoooNVEEb06HsRc+RmObl7ZP4BywQ2qkI/3LECWnqGKljeG9aREWUigbqBtidrgRj7frDc6aeFUixKKGZ6yiqN3ez9KBoNeTOJNtXpCKDQCRwqB32spijcNcyz0KUmwt6wH2VUJbB1h6NZgZtn0oH8yLRY4pc/TxcKvuVhCsDoDFlJMFlhk1rA9MIvoKuG6snntVAaGWmcxAbKv6xaaI6NLRdqofArMpUUUST8vQLStmsVuRedsSvr3DrZTZuGPL5H780k3qcQ3sswgswrivAZ0k5Vf+zevY0JZr49urddlckxHEnoTk+sfESNbP4hpgCMzuDNPrq31yuHbxl0yeg8tC1bj2g8sVh6SIRdzOmdVXum02jTyexso3BsteJqzGkbRhZpM8nRo0tzQMRGPWUSAv35/YjSR57pzHLftqLS0c0I7Lm55uL1mwlB7SKmAIz2icV5N+OQrRt5Qnl2NjtjtAgdKaUpKiQWCxttxRyke/6hwG1G+WT9tmGUVGjm8+hRQKy8dbisz6v9BJCvsHVYblFoqPY96HUQr28VO0fMd1Pj3j+YAjA6RV3s+GUZG0uEju5BFpVQ0FmyOhLGn0vfA9/bDdGRIHlCWJtPwtjyovscmxAnFGJVKGztTNeF68IEumajX/R5daZ5mIfhFXOoJEJHsQ5DLtuLj3UK/PFh2ZAYYc6MX1eUL9FhM5IpAKN98sr3ejOAnp0Lli/XSWF400IzRebC3m9YdjrPZJBlnw7r8Xvy6gDltTPcVyuSMtFFzSgJ71/QuQTaVOSfCa8si84fmucWFpaPmvznsL5PmLkbRhPp9uhibrD8voe+kbBQoN8vPDaLHo8QTAEYrROL+PAvmQ9nDHt5OtonLMIWS3TqBYcOJaGgzRKWnQ6jgLxwic1pGxO+OkJHK9kqwmfD3yWrfHSsPWWJVRb11475hYrOr0cvhw8vKZAweixUkLHpPX07/P762rpNoUKIdVS8cg3ns44ls9UMUwBG5wnttLEIIF0XBrrvQ9Av/fh468KujBBrJvHHj0byFEUrhELM1ygqmjuhbKkJfbw3X7WTBa1HEhpdgnvv3sbevg5j1XihnPUdwjDXrIisvHkpQnTAQFlnNHQ8THRFZWcyhg9fM+fQoeTl27s36cnPzCwNf/3/ubnkL+ulCwVOL0cAnYzG8cJo5crkb/fubFPB3r3JvQ2nw2yVPIHlzVRQ7E9oZjY2bff3ZSTC7+v3a8W5HrZVP2/+nN63o23/Ref0owvfJt923Wb/XfbuXSrwt3t3PBO+bpPYpNgIwKiO0J7aDP0WNdRqe33yly4alyWQ/P1st/fsKZMY5pfzRgBF59LX874QaBSCuofuhW1R27TyCE2OOhdB+wBCdI6AzlmI7a8VojYlhbPaxQohhjQTbtpqaGoLmAIwyhMroFXVg9lPwh/aa68X6LqoWlbIabtzH2TRzojLm4C00sjL6tYF0rLmi8gbVYTKcvfupWtk9epj2dp54ZxhpndMoMdMQp5YOZAelngoiykAoxrCXktYQbIuET69xjsHYcn34e+P7s328l6VNQEVhcl6dGehKMS2zHX1pPc+scyH5Orev47/LzLBxPwaOvRWfy9tCtJlnzV9IPzBFIBRFTHHlafqom+Dihc2WQXTwuV+IJwTIiZQYXmYZ9ZEM+G8y5qFhUZTmQ4VjZnZYp0WPaLIUhphdFusOmiewmlGMXRYiZgCMPKJJcDoJB+/Pc9U0U8Cq9N4+7FOINMveSz8NAw57DdCM0ws50Hb2devb6wTpKfuDJ8z72PQ+Qxhsbmy8fhFcwSUpU96/2BRQMOLn6yjKnTEh5GN7y36SBMfZz4+vjwUtleMjVX3e4ZlGHxNnrxoMD1q0OuyOHRoqb2+6Jxve6w4W9azf/TokuPdT+UJ8Ugtv05nIuv29Ak2AjDyyXJshU5gHwmhozuMRrLMN722+YcU5QKEFO07N7c8UzrrOB1eGTpoY5FQCwtLeRvtKqyikcIAdnBMAQwbzfT6Y3Z9XeUTlvdaTfiXC6Pcs6fRDNRK6GwnaaYtZcs36BDOrISyhYXGsNHYTP49VO0AABY6SURBVHMh2ikd1jfS0TlFFIVfevNclu+gj3r+HlMAw0SsamfNU9X7kixBpddrW3YPpwRcRpVO5tB0EwrzrOCAdkJf9WhKm2Waza71bY2VyQ5rBfWp8IeKfAAi8gEROSEiX1brLhWRT4jI19L/E+l6EZH3iMgxEXlYRK6pog1GB8jK9PXzwF64kPxlJfHoIbPep9VyyoPK7Gx9ev+dbEdo+2927t4ssp4nfz3f8amToq0JVY0A/gT4Q+Bute6dwCedc7eLyDvTz+8AXgvsSv+uA+5I/xudQk/MEesdlem9xKaxK6pPkyVMhi0sNOxV+5nFOpXk1Q9U0QnQ/gJ/L2PPnA7LLJvEqPf3VD1FZQ2oRAE45/5eRHYGq28G9qXLdwGHSBTAzcDd6eTwnxGRcRHZ6px7vIq2GB3EO/NaIVQS/RbP3g6xrNthFv6eVjsCemrOBx7I79nrWkRFFJmJBpBO+gC2KKH+BLAlXZ4EHlX7HU/XNSgAEdkP7AfYsWNHB5s5BGTN1eq3lSF0yGm7p3cEx3q6MSE/LIK/LLH5ZAeddkaBuoSGrjQaPoOxchBGA11xAjvnnIi4Jo85ABwAmJqaaupYIyU23Z7vwfsa/O2eP6+euwn6cgyT4PeEWb8e/8z40s7+3uhSz/651eYcbVLzvf6YGSf2Oba+DyZ0r4JOKoAnvWlHRLYCJ9L108B2td+2dJ3RDcoK5VjRrqwoFsNoljKlmbOqdOaVHQnnONi9u3jaxyER9jE6qQAOArcCt6f/71Pr3yYi95A4f2fN/t8hdA8/NAGVedjrlqA0DNRtesxOoXMgfF6AJlQMOk/Cb2vGjDTEQj6PShSAiPwFicN3k4gcB36NRPDfKyK3Ad8E3pDufj9wE3AMOAO8pYo2GB0iL1tzGE0XnaaZCVfqTpGjP6/8cixBzKNHD3mT2Gg/VbPO3CFRFFVFAf1oxqYbI/s64K1VXNcoyb59Sy9KXhKMNvsMcu/T6A55z5D2AczMLD2PerJ4yFeG/jnNK9EQCv6YItDvROhnGHAsE3hY8GFzWbZ7/fCXZZhCOY1q8YLdF1/z9nqvGMKZvzQ6rj8cjYbKIC//xaKDTAEMBWWjG2KhnTEGyUxhdI4yhQH9RC4+NyKc+SucCwHiBQn986qVQWxuBU/MPNRuGeg+xBSAkWBp8kYr5I0C84S/Pk4LbT0PgGbv3sb1OiO9jNDOKw9ddM4B9gfYfACDTlbt8337kl7T+HhjjfZ9++ITdhhGyNhYa/V8vNlmZGSpvpSvNeVrT3nzzJ495cpGrF+f7DczE5/LwM+/YDRgI4Bho5moCLPxG16Qxp6DVs2ArRaBC3viWeZM7UfwPfrQ9p/Vqx+ycFFTAMNGkeAvigIaxrIFw4yPyGnl984KIYbGyB+PdgiH1/PboFg461yXsIDbkNn4izAFMIhkFbXyL5Z+Mb0TrhmGrZrnsJMn/POUQ6wToefo1YK8SgfskPTeq0CSsPx6MzU15Y4cOdLrZrRO1cPKovPFJn7RPfewZ+Zf4pGRpL6/Lx9t5h+jE3gfQF6sfagMWn13hsykEyIiDznnprK2mxN4EAgdvdqJ5smq6aMdZ/5cftLyGDb5u6HRz0LWchmyghXaxTuVjShmAhpEsgq5xYbqs7NLk2pDcZE3GxUYGl23KBbCqZ85PYGLCeVaYAqgU5SdXKLsixA7n3dwzc0lL5aOa27GaTc3ZxE/RjFl53cIR5+6MzI7mzy/RXH2piC6gimAfkYXwpqdLV/HJwztM8FvlCFWpdRPFBQGBpQJNx7iBKy6YAqgUxSVX/CO1vHxciWaY8dCa1U5TeAbZQnNNmHRNliKtz98eCljV9fgt7ILtcUUQDeJmXF8GGbZ5Bhv39dhnB5vCrJqnkZZ9u5dPpOWLpympwLVz29Ymz+LZjo1RfsblWMKYJCwIm1GK/jpFr2w989QmWqZuja/OXf7juFQAM32LqqIQdbX1MfH6ux4wb1y5VIkRdYQOWZvNQxozpHvTTsebeLxI9JmplEsa84xBVErBl8B6FrjsW3Q/EOpE638ixNOuaiza7XNPg9fEheS85kpx2iGPXuWT6gS2t9jPfXQ8doL2/ywKoYem74GXwHoHnNVN1s7wA4fbqydH8bRi7R2DTPlGM0S1r+fmytX5rvs+xDW1YmdI+sda/fdy7p2VoBF1rWqap9WklqpxpRszPGt9033ufDJT/Hk6XNMP32W6Zkz6f+zXHbJGn7h1c8r164m6ZkCEJHXAO8GRoD3O+dur/QC/kb7XvThw0u9Ih2hEO4fi6EvG6ljGJ1mZKQx4co/395h6zsg2nnrKdu7L/OM23vQNPPnF3hs7QTTazYy/dl/Y3rby5meuJ7jGzYxfdmVPPErH2fhYmNpnssuWc31z76sY23qiQIQkRHgvcCrgOPA50TkoHPuK5VcQGvWsEe0sLBUWTA2F2gW/mWLzZRlZhqjk+h6XaEA98oAlvcwY5jg7hin5s8zvW4z0896MdNbdjN9/yNMP32W4y/6T0yv3shTv/Jx2P0Tyc4f+RIrrryeraefYvLUCV76zS8xeckIk+dOMfmbv8Lk+CiT46OMru5s2ZVejQCuBY45574OICL3ADcD1SiALGGuBXW4j+7hx5zAeVMkGkaV6AqbRZOh6BFrK/M6F6GDFvx19LqwrHOsU6VHJs0kemVd25t09+xZnhWv99Wj+nCO4Sbb55zj5Pf/YNJ7f/zbTK+8jOmNlzM9djnTP/I6pscu5/Sv/y1c/Wa4Ojlm9ae+yuSpk0yeOsErZx9OhPuJf2Ny9gSTp05wxelvsdJdXLqed8yfeLhrirpXCmASeFR9Pg5cp3cQkf3AfoAdO3Y0d3bt8NUxzjpxBZoLXfMRE2abNzqJnxUrK3BA25XzJk43muL8ihGeWH8Z0xu2Mb1mLBH0H36Yx2bPLtriz73kp5KdX5T82zA/x+Spk2ybPcF1j36ZyVMnUuF+ksnZE2w6dxqBxrwKPXm9Fv7QWCq7S9TWCeycOwAcgKQcdFMHh2GXc3PLh8rQXLSDdj6FowGro2O0gk+8iiUBFnVKupVEpZ/7LEdsmba00sYy1y7pBJ4/v8Dxp88y/Z/flgj3235qUbBPP32WJ647w0VpLI686asnmJwY5flbN/LKF2xZNMtcOT7Ktje9jo0LzyQ7+o7kg4eSaz/xJLy0SSdwj3IoeqUApoHt6vO2dF1n8DHNFqts9BrtxC1jszcKccDsmWcSAT9zlseuuIbp1RuZ/rOHFgX8t76TCuvnvx6AkcNf54qNa9k2Mcr1z76MbQc/xZXnTjH53391UcivXZVjf/fCv8/plQL4HLBLRK4iEfy3AD/WkSvlDalafel8j03H6bc6bZ7Rf/g5FJoNQYxhgr+QixcdJ9eNM71+E9NffGxRqE/PnGX66jdzfM0Y3/mNTywdsPNG1i6cZ/LJ00xOrOOFV25Meu8To0z+6juYPHeKLR+7j5Ujqsf/R29P/u/a3N0v12WTT0jPZgQTkZuA3ycJA/2Ac+63svbt+xnBDMPI5JkLF3lidp7jKvZ98f/MWR6fmeeZhUZ7+djoqiVzzETytyjkx0e59JLVSKs5OANE0YxgPfMBOOfuB+7v1fUNw+gOZ565kIRDasGu/j95ep6wH3r5hjVMTozy7ybHeM2LrmDbonBfx5Xja9mwdlVvvsyAUVsnsGEY9cc5x9Nnzi9mry7a4WeWBPzTZ843HLNyhbB1fC2T46O8/DmbmJwYVQJ+lK3ja1mz0qYd7QamAAzDyGThouPE6fkGk0zYiz/zTGME3LrVI4vmmO/ZNr4o2LdNJCabyzesZWSFmWfqgCkAwxhizl1Y4PGZeR6bWTLRHPe1aGbO8sTsPOcXGu0zE+tWMTkxyndtvoTv3bWZK8fXpjb4dWybGGV83Sqzv/cJpgAMY4CZO3ehobhYaIc/OXeuwf4uAls2rOXK8bW8ePsEk1cvOVe3pU7XS9aY2BgU7Jc0jD7FOce3v/NMgznmuBLux58+w6n5Cw3HrB5ZsWh/3/vczYvmmUTAr+OKsbWsXrki44rGoGEKwDBqysJFx5On5lPBfmaZkH9s5izz5xvDIy9ZPbIo1K951viiWcb34DetX8MKs78bKaYADKNHzJ9faIiWCZ2sT8zOcyFSHnhyYpTnbdnADc+7vKEHPzk+ytio2d+N8pgCMIwOcWo+DY8MhLu3wz81d65h/xUCV2xcy+TEKFPPmmiIe/cRNOtW2ytrVIc9TYbRAs45nprT9vflJprTof195YrFgmI3fvfli0Ld996vGFvLqhGzvxvdwxSAYUS4sHCRJ07NN0TMHNc9+ZmzPHOh0f6+Ye3KxXj36666lEkv4FMhv+kSs78b9cIUgDGULJYHjvTgH5uZ54lT88um59u0fjWT46O8YOtGXqXKA0+mTtaNVp7A6DNMARgDh3OOU2cvLCsupif3eGqusZzvyApZtL/73rt2rhaWBzaMPsQUgNF3XLzoeGruXGZxsemZs8yda7S/r1m5YlGYv0CXBx5fx+TEKFs2rGksD2wYQ4ApAKN2nF9IywMvOlXPNPTgH5udX2Z/37h2Jdsm1rHjsnW87NmXNfTeJydGuczKAxvGMkwBGF2nlfLAmzesYXJ8lBdOjvHqF16xzERj5YENo3lMARiV4pxj5sz5ZWUJfHExKw9sGPXBFIDRFBcvOk6cPtdQ+72oPPDoqqXyBFdvG18MlfQ9eCsPbBi9wRSA0cAzFy7y+OxSxurxp9PJPVLh/vjs2WXlgcfXJdPzXbXpEvbs2qQEfOJgnbDywIZRS9pSACLyeuDXgecD1zrnjqht7wJuAxaAn3HO/U26/jXAu0nmAn6/c+72dtpgNEdDeeAZneiUmGhOnF5eHvjyDWvYNrGO3dvH+YGrtzbGv1t5YMPoW9p9c78M/Ajwv/RKEXkBcAvwQuBK4O9E5Lnp5vcCrwKOA58TkYPOua+02Q6DpfLAj83ML5poQjPN7NlG+/uqEVnMVv2+XZsXs1e9DX7r2KiVBzaMAaUtBeCcewSIDe9vBu5xzp0D/lVEjgHXptuOOee+nh53T7qvKYAS6PLAy+u/n+GxmXnOnm+0v8fKA+sp+jZbeWDDGFo6NXafBD6jPh9P1wE8Gqy/LnYCEdkP7AfYsWNHB5pYP+bPL/D47HxDaQI9TV+sPMGllyTlCXZdvoF9z7u8wTSzbcLKAxuGkU2hAhCRvwOuiGz6ZefcfdU3KcE5dwA4ADA1NeUKdu8LssoD++WTp5eXB96yMQmPnNo50eBY9Xb40dUWHmkYRmsUKgDn3CtbOO80sF193pauI2d9X5NdHnh+0USzbHo+VR44NrmHlQc2DKOTdMoEdBD4cxH5XRIn8C7gs4AAu0TkKhLBfwvwYx1qQ6XEygOHvfhzYXngNSsXhflLd04sFhWbnEjMM1Ye2DCMXtJuGOgPA38AbAb+WkSOOude7Zz7RxG5l8S5ewF4q3NuIT3mbcDfkISBfsA5949tfYOKmD+/EE1qWpyeL6s88MQ6nr91I698wRauHFvL5MS6xV782KiVJzAMo76IC4uu1JCpqSl35MiR4h1zmD17XkXOnFnWg//WdzLKAwdFxfR/Kw9sGEadEZGHnHNTWdsHOoPnxOl53vT+z/LYzFlO55UH3rpxmYC/YuNaKw9sGMZAM9AKYGx0FdsvtfLAhmEYMQZaAaxZOcL7b80c/RiGYQw1ZuMwDMMYUkwBGIZhDCmmAAzDMIYUUwCGYRhDiikAwzCMIcUUgGEYxpBiCsAwDGNIMQVgGIYxpPRFLSAROQl8s9ftKGAT8FSvG9EG/dz+fm479Hf7+7ntMPjtf5ZzbnPWxr5QAP2AiBzJK7pUd/q5/f3cdujv9vdz28HabyYgwzCMIcUUgGEYxpBiCqA6DvS6AW3Sz+3v57ZDf7e/n9sOQ95+8wEYhmEMKTYCMAzDGFJMARiGYQwppgBKICLbReTTIvIVEflHEflZte2nReSr6fr/oda/S0SOicg/icire9PyxbZE2y8iu0XkMyJyVESOiMi16XoRkfek7X9YRK7pcfvXishnReSLafv/W7r+KhF5MG3nh0Rkdbp+Tfr5WLp9Zw3b/sH02fiyiHxARFal6/vi3qvt7xGROfW5H+69iMhvicg/i8gjIvIzan3t772I3Cgin0/f2wdE5Dnp+ubvvXPO/gr+gK3ANenyBuCfgRcArwD+DliTbrs8/f8C4IvAGuAq4F+AkRq2/2+B16brbwIOqeWPAQJcDzzY4/svwPp0eRXwYNque4Fb0vXvA34yXf4p4H3p8i3Ah2rY9pvSbQL8hWp7X9z79PMU8KfAnNq/H+79W4C7gRXpNv/e9sW9T9/f56v7/Set3nsbAZTAOfe4c+7z6fJp4BFgEvhJ4Hbn3Ll024n0kJuBe5xz55xz/wocA67tfssTctrvgI3pbmPAY+nyzcDdLuEzwLiIbO1ysxdJ2+F7mavSPwfcAHw4XX8X8EPp8s3pZ9LtN0qPJoDOartz7v50mwM+C2xL9+mLey8iI8DvAL8YHFL7e0/y3v6Gc+5iup9+b2t/78l/b5u696YAmiQdVr2YRBs/F/jedLh1WERemu42CTyqDjuerus5QfvfDvyOiDwK/E/gXelutWu/iIyIyFHgBPAJklHVjHPuQrqLbuNi+9Pts8Bl3W3xEmHbnXMPqm2rgDcBH09X1f7ep+1/G3DQOfd4sHs/3PtnA29MzZ4fE5Fd6e79cu9/ArhfRI6TPDu3p7s3fe9NATSBiKwH/gp4u3PuFLASuJRkWPZfgXt71dspQ6T9Pwn8nHNuO/BzwJ29bF8ezrkF59xukp7ytcB397hJpQnbLiIvUpv/CPh759z/603riom0//uA1wN/0NuWFZNx79cA8y4pofC/gQ/0so15ZLT/54CbnHPbgD8GfrfV85sCKEnaU/sr4IPOuY+kq48DH0mHap8FLpIUZ5oGtqvDt6XrekZG+28F/PJfsmSmql37Pc65GeDTwMtIhugr0026jYvtT7ePAd/qclOXodr+GgAR+TVgM/Dzard+uPevAJ4DHBORbwDrRORYuls/3PvjLD33HwWuTpf74d6/FvgeNYr8EPDv0+Wm770pgBKkvfo7gUecc1rb/h+SlwEReS6wmqQy30HgltQrfxWwi8TO2xNy2v8YsDddvgH4Wrp8EPjxNCriemA2MtTvGiKyWUTG0+VR4FUkfoxPA69Ld7sVuC9dPph+Jt3+qdTW3nUy2v5VEfkJ4NXAj3pbdEo/3PuHnHNXOOd2Oud2Amecc89JD6n9vUe9tyTP/z+ny/1w7x8BxlJ5g1oHrdz7Ii+x/TmAPSSOl4eBo+nfTSQC/8+ALwOfB25Qx/wyiZ36n0gjbWrY/j3AQyQRSw8CL3FL0QfvTdv/JWCqx+2/GvhC2v4vA7+arv8uEsV6jGQE46Ox1qafj6Xbv6uGbb+Q3l//e/j1fXHvg310FFA/3Ptx4K/T+/sPJD3qvrn3wA+n7fsicMjf41buvZWCMAzDGFLMBGQYhjGkmAIwDMMYUkwBGIZhDCmmAAzDMIYUUwCGYRhDiikAwzCMIcUUgGEYxpDy/wHSMO17zB7QyAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cbUrg3l9ZL-H"
      },
      "source": [
        "##Neural Network Implementation\n",
        "Try a neural network I guess here"
      ],
      "id": "cbUrg3l9ZL-H"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VnxUpGyiY4ds"
      },
      "source": [
        "## Polynomial Model with Cross-Fold Validation\n",
        "Cross-Fold Validation is used to optimize for the d variable"
      ],
      "id": "VnxUpGyiY4ds"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g09RkaRIYuC4"
      },
      "source": [
        "## Random Forest/Decision Tree\n",
        "Attempt to use random forest/Decision tree to model the variables"
      ],
      "id": "g09RkaRIYuC4"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CKp2OMWnLL9u"
      },
      "source": [
        "# Trash\n",
        "\n"
      ],
      "id": "CKp2OMWnLL9u"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "id": "tIUMcByYGorh",
        "outputId": "98d26598-34c4-480e-c2b1-d3c1efdf4a42"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import svm\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(data_xs, data_y, test_size=0.4, random_state=0)\n",
        "\n",
        "print(X_train.shape, y_train.shape)\n",
        "print(X_test.shape, y_test.shape)\n",
        "\n",
        "\n",
        "##svm doesnt work because its meant for classification\n",
        "clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)\n",
        "clf.score(X_test, y_test)"
      ],
      "id": "tIUMcByYGorh",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(36841, 2) (36841, 1)\n",
            "(24562, 2) (24562, 1)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning:\n",
            "\n",
            "A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-34-e81842a7693c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msvm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSVC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkernel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'linear'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mC\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    147\u001b[0m                          \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'C'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m                          accept_large_sparse=False)\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m         sample_weight = np.asarray([]\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_validate_targets\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    523\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m         \u001b[0my_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcolumn_or_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwarn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m         \u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_inverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_weight_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_class_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py\u001b[0m in \u001b[0;36mcheck_classification_targets\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m    167\u001b[0m     if y_type not in ['binary', 'multiclass', 'multiclass-multioutput',\n\u001b[1;32m    168\u001b[0m                       'multilabel-indicator', 'multilabel-sequences']:\n\u001b[0;32m--> 169\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Unknown label type: %r\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    170\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Unknown label type: 'continuous'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ys8bfo5-Y2Z-"
      },
      "source": [
        ""
      ],
      "id": "ys8bfo5-Y2Z-"
    }
  ]
}
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Project.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  },
  "metadata": {
   "interpreter": {
    "hash": "0a84f4e9513e11ca67866431d8df20f43fe616bff8acff9def79f28cd0bb3c91"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
>>>>>>> 27f0ff681bfdb43828a9c52923b44cf325d6b708
